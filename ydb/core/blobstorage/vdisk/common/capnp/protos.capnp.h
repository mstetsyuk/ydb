// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protos.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(990674b367338405);
CAPNP_DECLARE_SCHEMA(f4fdd745e8553170);
CAPNP_DECLARE_SCHEMA(b4f0bf316adca7db);
enum class EGetHandleClass_b4f0bf316adca7db: uint16_t {
  NOT_SET,
  ASYNC_READ,
  FAST_READ,
  DISCOVER,
  LOW_READ,
};
CAPNP_DECLARE_ENUM(EGetHandleClass, b4f0bf316adca7db);
CAPNP_DECLARE_SCHEMA(fc5ba5fa09084fb6);
CAPNP_DECLARE_SCHEMA(b5aac97222205eea);
CAPNP_DECLARE_SCHEMA(cdb3998bab27821c);
enum class EStatus_cdb3998bab27821c: uint16_t {
  NOT_SET,
  UNKNOWN,
  SUCCESS,
  WINDOW_UPDATE,
  PROCESSED,
  INCORRECT_MSG_ID,
  HIGH_WATERMARK_OVERFLOW,
};
CAPNP_DECLARE_ENUM(EStatus, cdb3998bab27821c);
CAPNP_DECLARE_SCHEMA(a70b00531ce54774);
CAPNP_DECLARE_SCHEMA(ae684e4fef354dba);
enum class EVDiskQueueId_ae684e4fef354dba: uint16_t {
  NOT_SET,
  UNKNOWN,
  PUT_TABLET_LOG,
  PUT_ASYNC_BLOB,
  PUT_USER_DATA,
  GET_ASYNC_READ,
  GET_FAST_READ,
  GET_DISCOVER,
  GET_LOW_READ,
  BEGIN,
  END,
};
CAPNP_DECLARE_ENUM(EVDiskQueueId, ae684e4fef354dba);
CAPNP_DECLARE_SCHEMA(945720999fcdf538);
enum class EVDiskInternalQueueId_945720999fcdf538: uint16_t {
  NOT_SET,
  INT_UNKNOWN,
  INT_BEGIN,
  INT_GET_ASYNC,
  INT_GET_FAST,
  INT_PUT_LOG,
  INT_PUT_HUGE_FOREGROUND,
  INT_PUT_HUGE_BACKGROUND,
  INT_GET_DISCOVER,
  INT_LOW_READ,
  INT_END,
};
CAPNP_DECLARE_ENUM(EVDiskInternalQueueId, 945720999fcdf538);
CAPNP_DECLARE_SCHEMA(ade7d876d6717a59);
CAPNP_DECLARE_SCHEMA(9acf799e6b438541);
CAPNP_DECLARE_SCHEMA(ca61e4efe5dc943c);
CAPNP_DECLARE_SCHEMA(8a2a54f64613485e);
CAPNP_DECLARE_SCHEMA(854aa591c9f9731f);
CAPNP_DECLARE_SCHEMA(a13a704b104f6a9f);
CAPNP_DECLARE_SCHEMA(c306e80ee6ccea66);
CAPNP_DECLARE_SCHEMA(fcf85e673c329d8e);
CAPNP_DECLARE_SCHEMA(90d7d80e10054f8d);
enum class EReplyStatus_90d7d80e10054f8d: uint16_t {
  OK,
  ERROR,
  ALREADY,
  TIMEOUT,
  RACE,
  NO_DATA,
  BLOCKED,
  NOT_READY,
  OVERRUN,
  TRY_LATER,
  TRY_LATER_TIME,
  TRY_LATER_SIZE,
  DEADLINE,
  CORRUPTED,
  SCHEDULED,
  OUT_OF_SPACE,
  VDISK_ERROR_STATE,
  INVALID_OWNER,
  INVALID_ROUND,
  RESTART,
  NOT_YET,
  NO_GROUP,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(EReplyStatus, 90d7d80e10054f8d);
CAPNP_DECLARE_SCHEMA(b35cd94897e2481f);
CAPNP_DECLARE_SCHEMA(e052269b9131b6d0);
CAPNP_DECLARE_SCHEMA(b1079015603a832a);
CAPNP_DECLARE_SCHEMA(f7a4626d15731279);
enum class EEntityStatus_f7a4626d15731279: uint16_t {
  INITIAL,
  CREATE,
  DESTROY,
  RESTART,
};
CAPNP_DECLARE_ENUM(EEntityStatus, f7a4626d15731279);
CAPNP_DECLARE_SCHEMA(d812127e1c81825f);
CAPNP_DECLARE_SCHEMA(c96eab4322fb4924);
CAPNP_DECLARE_SCHEMA(e583f5660b1f038f);
enum class EPDiskType_e583f5660b1f038f: uint16_t {
  ROT,
  SSD,
  NVME,
  UNKNOWN_TYPE,
};
CAPNP_DECLARE_ENUM(EPDiskType, e583f5660b1f038f);
CAPNP_DECLARE_SCHEMA(9abdb0aadaf2da61);
enum class E_9abdb0aadaf2da61: uint16_t {
  NONE,
  PENDING,
  IN_PROGRESS,
  DONE,
};
CAPNP_DECLARE_ENUM(E, 9abdb0aadaf2da61);
CAPNP_DECLARE_SCHEMA(a7264e341943aefb);
CAPNP_DECLARE_SCHEMA(96571abcd8081887);

}  // namespace schemas
}  // namespace capnp


struct TMessageId {
  TMessageId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(990674b367338405, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TTimestamps {
  TTimestamps() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4fdd745e8553170, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EGetHandleClass_b4f0bf316adca7db EGetHandleClass;

struct TActorId {
  TActorId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc5ba5fa09084fb6, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TExecTimeStats {
  TExecTimeStats() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5aac97222205eea, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EStatus_cdb3998bab27821c EStatus;

struct TWindowFeedback {
  TWindowFeedback() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a70b00531ce54774, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EVDiskQueueId_ae684e4fef354dba EVDiskQueueId;

typedef ::capnp::schemas::EVDiskInternalQueueId_945720999fcdf538 EVDiskInternalQueueId;

struct TVDiskCostSettings {
  TVDiskCostSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ade7d876d6717a59, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TMsgQoS {
  TMsgQoS() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9acf799e6b438541, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TVDiskID {
  TVDiskID() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca61e4efe5dc943c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TLogoBlobID {
  TLogoBlobID() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a2a54f64613485e, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TRangeQuery {
  TRangeQuery() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(854aa591c9f9731f, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TExtremeQuery {
  TExtremeQuery() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a13a704b104f6a9f, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TTabletData {
  TTabletData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c306e80ee6ccea66, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TEvVGet {
  TEvVGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcf85e673c329d8e, 3, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EReplyStatus_90d7d80e10054f8d EReplyStatus;

struct TQueryResult {
  TQueryResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b35cd94897e2481f, 6, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TVDiskLocation {
  TVDiskLocation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e052269b9131b6d0, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TFailDomain {
  TFailDomain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1079015603a832a, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EEntityStatus_f7a4626d15731279 EEntityStatus;

struct TFailRealm {
  TFailRealm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d812127e1c81825f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TScopeId {
  TScopeId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c96eab4322fb4924, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EPDiskType_e583f5660b1f038f EPDiskType;

typedef ::capnp::schemas::E_9abdb0aadaf2da61 E;

struct TGroupInfo {
  TGroupInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7264e341943aefb, 7, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TEvVGetResult {
  TEvVGetResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96571abcd8081887, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TMessageId::Reader {
public:
  typedef TMessageId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSequenceId() const;

  inline  ::uint64_t getMsgId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TMessageId::Builder {
public:
  typedef TMessageId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSequenceId();
  inline void setSequenceId( ::uint64_t value);

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TMessageId::Pipeline {
public:
  typedef TMessageId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TTimestamps::Reader {
public:
  typedef TTimestamps Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSentByDSProxyUs() const;

  inline  ::uint64_t getReceivedByVDiskUs() const;

  inline  ::uint64_t getSentByVDiskUs() const;

  inline  ::uint64_t getReceivedByDSProxyUs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TTimestamps::Builder {
public:
  typedef TTimestamps Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSentByDSProxyUs();
  inline void setSentByDSProxyUs( ::uint64_t value);

  inline  ::uint64_t getReceivedByVDiskUs();
  inline void setReceivedByVDiskUs( ::uint64_t value);

  inline  ::uint64_t getSentByVDiskUs();
  inline void setSentByVDiskUs( ::uint64_t value);

  inline  ::uint64_t getReceivedByDSProxyUs();
  inline void setReceivedByDSProxyUs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TTimestamps::Pipeline {
public:
  typedef TTimestamps Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TActorId::Reader {
public:
  typedef TActorId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1() const;

  inline  ::uint64_t getRawX2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TActorId::Builder {
public:
  typedef TActorId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1();
  inline void setRawX1( ::uint64_t value);

  inline  ::uint64_t getRawX2();
  inline void setRawX2( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TActorId::Pipeline {
public:
  typedef TActorId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TExecTimeStats::Reader {
public:
  typedef TExecTimeStats Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSubmitTimestamp() const;

  inline  ::uint64_t getInSenderQueue() const;

  inline  ::uint64_t getReceivedTimestamp() const;

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getInQueue() const;

  inline  ::uint64_t getExecution() const;

  inline  ::uint64_t getHugeWriteTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TExecTimeStats::Builder {
public:
  typedef TExecTimeStats Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSubmitTimestamp();
  inline void setSubmitTimestamp( ::uint64_t value);

  inline  ::uint64_t getInSenderQueue();
  inline void setInSenderQueue( ::uint64_t value);

  inline  ::uint64_t getReceivedTimestamp();
  inline void setReceivedTimestamp( ::uint64_t value);

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getInQueue();
  inline void setInQueue( ::uint64_t value);

  inline  ::uint64_t getExecution();
  inline void setExecution( ::uint64_t value);

  inline  ::uint64_t getHugeWriteTime();
  inline void setHugeWriteTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TExecTimeStats::Pipeline {
public:
  typedef TExecTimeStats Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TWindowFeedback::Reader {
public:
  typedef TWindowFeedback Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::EStatus getStatus() const;

  inline  ::uint64_t getActualWindowSize() const;

  inline  ::uint64_t getMaxWindowSize() const;

  inline bool hasExpectedMsgId() const;
  inline  ::TMessageId::Reader getExpectedMsgId() const;

  inline bool hasFailedMsgId() const;
  inline  ::TMessageId::Reader getFailedMsgId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TWindowFeedback::Builder {
public:
  typedef TWindowFeedback Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::EStatus getStatus();
  inline void setStatus( ::EStatus value);

  inline  ::uint64_t getActualWindowSize();
  inline void setActualWindowSize( ::uint64_t value);

  inline  ::uint64_t getMaxWindowSize();
  inline void setMaxWindowSize( ::uint64_t value);

  inline bool hasExpectedMsgId();
  inline  ::TMessageId::Builder getExpectedMsgId();
  inline void setExpectedMsgId( ::TMessageId::Reader value);
  inline  ::TMessageId::Builder initExpectedMsgId();
  inline void adoptExpectedMsgId(::capnp::Orphan< ::TMessageId>&& value);
  inline ::capnp::Orphan< ::TMessageId> disownExpectedMsgId();

  inline bool hasFailedMsgId();
  inline  ::TMessageId::Builder getFailedMsgId();
  inline void setFailedMsgId( ::TMessageId::Reader value);
  inline  ::TMessageId::Builder initFailedMsgId();
  inline void adoptFailedMsgId(::capnp::Orphan< ::TMessageId>&& value);
  inline ::capnp::Orphan< ::TMessageId> disownFailedMsgId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TWindowFeedback::Pipeline {
public:
  typedef TWindowFeedback Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TMessageId::Pipeline getExpectedMsgId();
  inline  ::TMessageId::Pipeline getFailedMsgId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TVDiskCostSettings::Reader {
public:
  typedef TVDiskCostSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSeekTimeUs() const;

  inline  ::uint64_t getReadSpeedBps() const;

  inline  ::uint64_t getWriteSpeedBps() const;

  inline  ::uint64_t getReadBlockSize() const;

  inline  ::uint64_t getWriteBlockSize() const;

  inline  ::uint32_t getMinREALHugeBlobInBytes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TVDiskCostSettings::Builder {
public:
  typedef TVDiskCostSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSeekTimeUs();
  inline void setSeekTimeUs( ::uint64_t value);

  inline  ::uint64_t getReadSpeedBps();
  inline void setReadSpeedBps( ::uint64_t value);

  inline  ::uint64_t getWriteSpeedBps();
  inline void setWriteSpeedBps( ::uint64_t value);

  inline  ::uint64_t getReadBlockSize();
  inline void setReadBlockSize( ::uint64_t value);

  inline  ::uint64_t getWriteBlockSize();
  inline void setWriteBlockSize( ::uint64_t value);

  inline  ::uint32_t getMinREALHugeBlobInBytes();
  inline void setMinREALHugeBlobInBytes( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TVDiskCostSettings::Pipeline {
public:
  typedef TVDiskCostSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TMsgQoS::Reader {
public:
  typedef TMsgQoS Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDeadlineSeconds() const;

  inline bool hasMsgId() const;
  inline  ::TMessageId::Reader getMsgId() const;

  inline  ::uint64_t getCost() const;

  inline  ::EVDiskQueueId getExtQueueId() const;

  inline  ::EVDiskInternalQueueId getIntQueueId() const;

  inline bool hasCostSettings() const;
  inline  ::TVDiskCostSettings::Reader getCostSettings() const;

  inline bool getSendMeCostSettings() const;

  inline bool hasWindow() const;
  inline  ::TWindowFeedback::Reader getWindow() const;

  inline  ::uint32_t getProxyNodeId() const;

  inline  ::uint32_t getReplVDiskId() const;

  inline  ::uint64_t getVDiskLoadId() const;

  inline  ::uint32_t getVPatchVDiskId() const;

  inline bool hasExecTimeStats() const;
  inline  ::TExecTimeStats::Reader getExecTimeStats() const;

  inline bool hasSenderActorId() const;
  inline  ::TActorId::Reader getSenderActorId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TMsgQoS::Builder {
public:
  typedef TMsgQoS Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDeadlineSeconds();
  inline void setDeadlineSeconds( ::uint32_t value);

  inline bool hasMsgId();
  inline  ::TMessageId::Builder getMsgId();
  inline void setMsgId( ::TMessageId::Reader value);
  inline  ::TMessageId::Builder initMsgId();
  inline void adoptMsgId(::capnp::Orphan< ::TMessageId>&& value);
  inline ::capnp::Orphan< ::TMessageId> disownMsgId();

  inline  ::uint64_t getCost();
  inline void setCost( ::uint64_t value);

  inline  ::EVDiskQueueId getExtQueueId();
  inline void setExtQueueId( ::EVDiskQueueId value);

  inline  ::EVDiskInternalQueueId getIntQueueId();
  inline void setIntQueueId( ::EVDiskInternalQueueId value);

  inline bool hasCostSettings();
  inline  ::TVDiskCostSettings::Builder getCostSettings();
  inline void setCostSettings( ::TVDiskCostSettings::Reader value);
  inline  ::TVDiskCostSettings::Builder initCostSettings();
  inline void adoptCostSettings(::capnp::Orphan< ::TVDiskCostSettings>&& value);
  inline ::capnp::Orphan< ::TVDiskCostSettings> disownCostSettings();

  inline bool getSendMeCostSettings();
  inline void setSendMeCostSettings(bool value);

  inline bool hasWindow();
  inline  ::TWindowFeedback::Builder getWindow();
  inline void setWindow( ::TWindowFeedback::Reader value);
  inline  ::TWindowFeedback::Builder initWindow();
  inline void adoptWindow(::capnp::Orphan< ::TWindowFeedback>&& value);
  inline ::capnp::Orphan< ::TWindowFeedback> disownWindow();

  inline  ::uint32_t getProxyNodeId();
  inline void setProxyNodeId( ::uint32_t value);

  inline  ::uint32_t getReplVDiskId();
  inline void setReplVDiskId( ::uint32_t value);

  inline  ::uint64_t getVDiskLoadId();
  inline void setVDiskLoadId( ::uint64_t value);

  inline  ::uint32_t getVPatchVDiskId();
  inline void setVPatchVDiskId( ::uint32_t value);

  inline bool hasExecTimeStats();
  inline  ::TExecTimeStats::Builder getExecTimeStats();
  inline void setExecTimeStats( ::TExecTimeStats::Reader value);
  inline  ::TExecTimeStats::Builder initExecTimeStats();
  inline void adoptExecTimeStats(::capnp::Orphan< ::TExecTimeStats>&& value);
  inline ::capnp::Orphan< ::TExecTimeStats> disownExecTimeStats();

  inline bool hasSenderActorId();
  inline  ::TActorId::Builder getSenderActorId();
  inline void setSenderActorId( ::TActorId::Reader value);
  inline  ::TActorId::Builder initSenderActorId();
  inline void adoptSenderActorId(::capnp::Orphan< ::TActorId>&& value);
  inline ::capnp::Orphan< ::TActorId> disownSenderActorId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TMsgQoS::Pipeline {
public:
  typedef TMsgQoS Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TMessageId::Pipeline getMsgId();
  inline  ::TVDiskCostSettings::Pipeline getCostSettings();
  inline  ::TWindowFeedback::Pipeline getWindow();
  inline  ::TExecTimeStats::Pipeline getExecTimeStats();
  inline  ::TActorId::Pipeline getSenderActorId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TVDiskID::Reader {
public:
  typedef TVDiskID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID() const;

  inline  ::uint32_t getGroupGeneration() const;

  inline  ::uint32_t getRing() const;

  inline  ::uint32_t getDomain() const;

  inline  ::uint32_t getVDisk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TVDiskID::Builder {
public:
  typedef TVDiskID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID();
  inline void setGroupID( ::uint32_t value);

  inline  ::uint32_t getGroupGeneration();
  inline void setGroupGeneration( ::uint32_t value);

  inline  ::uint32_t getRing();
  inline void setRing( ::uint32_t value);

  inline  ::uint32_t getDomain();
  inline void setDomain( ::uint32_t value);

  inline  ::uint32_t getVDisk();
  inline void setVDisk( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TVDiskID::Pipeline {
public:
  typedef TVDiskID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TLogoBlobID::Reader {
public:
  typedef TLogoBlobID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getRawX1() const;

  inline  ::int64_t getRawX2() const;

  inline  ::int64_t getRawX3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TLogoBlobID::Builder {
public:
  typedef TLogoBlobID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getRawX1();
  inline void setRawX1( ::int64_t value);

  inline  ::int64_t getRawX2();
  inline void setRawX2( ::int64_t value);

  inline  ::int64_t getRawX3();
  inline void setRawX3( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TLogoBlobID::Pipeline {
public:
  typedef TLogoBlobID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TRangeQuery::Reader {
public:
  typedef TRangeQuery Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrom() const;
  inline  ::TLogoBlobID::Reader getFrom() const;

  inline bool hasTo() const;
  inline  ::TLogoBlobID::Reader getTo() const;

  inline  ::uint64_t getCookie() const;

  inline  ::uint32_t getMaxResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TRangeQuery::Builder {
public:
  typedef TRangeQuery Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrom();
  inline  ::TLogoBlobID::Builder getFrom();
  inline void setFrom( ::TLogoBlobID::Reader value);
  inline  ::TLogoBlobID::Builder initFrom();
  inline void adoptFrom(::capnp::Orphan< ::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::TLogoBlobID> disownFrom();

  inline bool hasTo();
  inline  ::TLogoBlobID::Builder getTo();
  inline void setTo( ::TLogoBlobID::Reader value);
  inline  ::TLogoBlobID::Builder initTo();
  inline void adoptTo(::capnp::Orphan< ::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::TLogoBlobID> disownTo();

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline  ::uint32_t getMaxResults();
  inline void setMaxResults( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TRangeQuery::Pipeline {
public:
  typedef TRangeQuery Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TLogoBlobID::Pipeline getFrom();
  inline  ::TLogoBlobID::Pipeline getTo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TExtremeQuery::Reader {
public:
  typedef TExtremeQuery Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::TLogoBlobID::Reader getId() const;

  inline  ::uint64_t getShift() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getCookie() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TExtremeQuery::Builder {
public:
  typedef TExtremeQuery Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::TLogoBlobID::Builder getId();
  inline void setId( ::TLogoBlobID::Reader value);
  inline  ::TLogoBlobID::Builder initId();
  inline void adoptId(::capnp::Orphan< ::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::TLogoBlobID> disownId();

  inline  ::uint64_t getShift();
  inline void setShift( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TExtremeQuery::Pipeline {
public:
  typedef TExtremeQuery Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TLogoBlobID::Pipeline getId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TTabletData::Reader {
public:
  typedef TTabletData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getGeneration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TTabletData::Builder {
public:
  typedef TTabletData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getGeneration();
  inline void setGeneration( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TTabletData::Pipeline {
public:
  typedef TTabletData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TEvVGet::Reader {
public:
  typedef TEvVGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRangeQuery() const;
  inline  ::TRangeQuery::Reader getRangeQuery() const;

  inline bool hasExtremeQueries() const;
  inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader getExtremeQueries() const;

  inline bool hasVDiskID() const;
  inline  ::TVDiskID::Reader getVDiskID() const;

  inline bool getNotifyIfNotReady() const;

  inline bool getShowInternals() const;

  inline  ::uint64_t getCookie() const;

  inline bool hasMsgQoS() const;
  inline  ::TMsgQoS::Reader getMsgQoS() const;

  inline bool getIndexOnly() const;

  inline  ::EGetHandleClass getHandleClass() const;

  inline bool getSuppressBarrierCheck() const;

  inline  ::uint64_t getTabletId() const;

  inline bool getAcquireBlockedGeneration() const;

  inline bool hasTimestamps() const;
  inline  ::TTimestamps::Reader getTimestamps() const;

  inline  ::uint32_t getForceBlockedGeneration() const;

  inline bool hasReaderTabletData() const;
  inline  ::TTabletData::Reader getReaderTabletData() const;

  inline bool hasForceBlockTabletData() const;
  inline  ::TTabletData::Reader getForceBlockTabletData() const;

  inline bool hasSnapshotId() const;
  inline  ::capnp::Data::Reader getSnapshotId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TEvVGet::Builder {
public:
  typedef TEvVGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRangeQuery();
  inline  ::TRangeQuery::Builder getRangeQuery();
  inline void setRangeQuery( ::TRangeQuery::Reader value);
  inline  ::TRangeQuery::Builder initRangeQuery();
  inline void adoptRangeQuery(::capnp::Orphan< ::TRangeQuery>&& value);
  inline ::capnp::Orphan< ::TRangeQuery> disownRangeQuery();

  inline bool hasExtremeQueries();
  inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder getExtremeQueries();
  inline void setExtremeQueries( ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder initExtremeQueries(unsigned int size);
  inline void adoptExtremeQueries(::capnp::Orphan< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>> disownExtremeQueries();

  inline bool hasVDiskID();
  inline  ::TVDiskID::Builder getVDiskID();
  inline void setVDiskID( ::TVDiskID::Reader value);
  inline  ::TVDiskID::Builder initVDiskID();
  inline void adoptVDiskID(::capnp::Orphan< ::TVDiskID>&& value);
  inline ::capnp::Orphan< ::TVDiskID> disownVDiskID();

  inline bool getNotifyIfNotReady();
  inline void setNotifyIfNotReady(bool value);

  inline bool getShowInternals();
  inline void setShowInternals(bool value);

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline bool hasMsgQoS();
  inline  ::TMsgQoS::Builder getMsgQoS();
  inline void setMsgQoS( ::TMsgQoS::Reader value);
  inline  ::TMsgQoS::Builder initMsgQoS();
  inline void adoptMsgQoS(::capnp::Orphan< ::TMsgQoS>&& value);
  inline ::capnp::Orphan< ::TMsgQoS> disownMsgQoS();

  inline bool getIndexOnly();
  inline void setIndexOnly(bool value);

  inline  ::EGetHandleClass getHandleClass();
  inline void setHandleClass( ::EGetHandleClass value);

  inline bool getSuppressBarrierCheck();
  inline void setSuppressBarrierCheck(bool value);

  inline  ::uint64_t getTabletId();
  inline void setTabletId( ::uint64_t value);

  inline bool getAcquireBlockedGeneration();
  inline void setAcquireBlockedGeneration(bool value);

  inline bool hasTimestamps();
  inline  ::TTimestamps::Builder getTimestamps();
  inline void setTimestamps( ::TTimestamps::Reader value);
  inline  ::TTimestamps::Builder initTimestamps();
  inline void adoptTimestamps(::capnp::Orphan< ::TTimestamps>&& value);
  inline ::capnp::Orphan< ::TTimestamps> disownTimestamps();

  inline  ::uint32_t getForceBlockedGeneration();
  inline void setForceBlockedGeneration( ::uint32_t value);

  inline bool hasReaderTabletData();
  inline  ::TTabletData::Builder getReaderTabletData();
  inline void setReaderTabletData( ::TTabletData::Reader value);
  inline  ::TTabletData::Builder initReaderTabletData();
  inline void adoptReaderTabletData(::capnp::Orphan< ::TTabletData>&& value);
  inline ::capnp::Orphan< ::TTabletData> disownReaderTabletData();

  inline bool hasForceBlockTabletData();
  inline  ::TTabletData::Builder getForceBlockTabletData();
  inline void setForceBlockTabletData( ::TTabletData::Reader value);
  inline  ::TTabletData::Builder initForceBlockTabletData();
  inline void adoptForceBlockTabletData(::capnp::Orphan< ::TTabletData>&& value);
  inline ::capnp::Orphan< ::TTabletData> disownForceBlockTabletData();

  inline bool hasSnapshotId();
  inline  ::capnp::Data::Builder getSnapshotId();
  inline void setSnapshotId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSnapshotId(unsigned int size);
  inline void adoptSnapshotId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSnapshotId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TEvVGet::Pipeline {
public:
  typedef TEvVGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TRangeQuery::Pipeline getRangeQuery();
  inline  ::TVDiskID::Pipeline getVDiskID();
  inline  ::TMsgQoS::Pipeline getMsgQoS();
  inline  ::TTimestamps::Pipeline getTimestamps();
  inline  ::TTabletData::Pipeline getReaderTabletData();
  inline  ::TTabletData::Pipeline getForceBlockTabletData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TQueryResult::Reader {
public:
  typedef TQueryResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::EReplyStatus getStatus() const;

  inline bool hasBlobID() const;
  inline  ::TLogoBlobID::Reader getBlobID() const;

  inline  ::uint64_t getShift() const;

  inline  ::uint64_t getSize() const;

  inline bool hasSuffer() const;
  inline  ::capnp::Data::Reader getSuffer() const;

  inline  ::uint64_t getCookie() const;

  inline  ::uint64_t getFullDataSize() const;

  inline  ::uint64_t getIngress() const;

  inline bool hasParts() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getParts() const;

  inline bool getKeep() const;

  inline bool getDoNotKeep() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TQueryResult::Builder {
public:
  typedef TQueryResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::EReplyStatus getStatus();
  inline void setStatus( ::EReplyStatus value);

  inline bool hasBlobID();
  inline  ::TLogoBlobID::Builder getBlobID();
  inline void setBlobID( ::TLogoBlobID::Reader value);
  inline  ::TLogoBlobID::Builder initBlobID();
  inline void adoptBlobID(::capnp::Orphan< ::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::TLogoBlobID> disownBlobID();

  inline  ::uint64_t getShift();
  inline void setShift( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline bool hasSuffer();
  inline  ::capnp::Data::Builder getSuffer();
  inline void setSuffer( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSuffer(unsigned int size);
  inline void adoptSuffer(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSuffer();

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline  ::uint64_t getFullDataSize();
  inline void setFullDataSize( ::uint64_t value);

  inline  ::uint64_t getIngress();
  inline void setIngress( ::uint64_t value);

  inline bool hasParts();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getParts();
  inline void setParts( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setParts(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initParts(unsigned int size);
  inline void adoptParts(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownParts();

  inline bool getKeep();
  inline void setKeep(bool value);

  inline bool getDoNotKeep();
  inline void setDoNotKeep(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TQueryResult::Pipeline {
public:
  typedef TQueryResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TLogoBlobID::Pipeline getBlobID();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TVDiskLocation::Reader {
public:
  typedef TVDiskLocation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNodeId() const;

  inline  ::uint32_t getPDiskId() const;

  inline  ::uint32_t getVDiskSlotId() const;

  inline  ::uint64_t getPDiskGuid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TVDiskLocation::Builder {
public:
  typedef TVDiskLocation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNodeId();
  inline void setNodeId( ::uint32_t value);

  inline  ::uint32_t getPDiskId();
  inline void setPDiskId( ::uint32_t value);

  inline  ::uint32_t getVDiskSlotId();
  inline void setVDiskSlotId( ::uint32_t value);

  inline  ::uint64_t getPDiskGuid();
  inline void setPDiskGuid( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TVDiskLocation::Pipeline {
public:
  typedef TVDiskLocation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TFailDomain::Reader {
public:
  typedef TFailDomain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVDiskLocations() const;
  inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Reader getVDiskLocations() const;

  inline bool hasFailDomains() const;
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader getFailDomains() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TFailDomain::Builder {
public:
  typedef TFailDomain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVDiskLocations();
  inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Builder getVDiskLocations();
  inline void setVDiskLocations( ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Builder initVDiskLocations(unsigned int size);
  inline void adoptVDiskLocations(::capnp::Orphan< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>> disownVDiskLocations();

  inline bool hasFailDomains();
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder getFailDomains();
  inline void setFailDomains( ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder initFailDomains(unsigned int size);
  inline void adoptFailDomains(::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>> disownFailDomains();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TFailDomain::Pipeline {
public:
  typedef TFailDomain Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TFailRealm::Reader {
public:
  typedef TFailRealm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFailDomains() const;
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader getFailDomains() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TFailRealm::Builder {
public:
  typedef TFailRealm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFailDomains();
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder getFailDomains();
  inline void setFailDomains( ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder initFailDomains(unsigned int size);
  inline void adoptFailDomains(::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>> disownFailDomains();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TFailRealm::Pipeline {
public:
  typedef TFailRealm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TScopeId::Reader {
public:
  typedef TScopeId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getX1() const;

  inline  ::int64_t getX2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TScopeId::Builder {
public:
  typedef TScopeId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getX1();
  inline void setX1( ::int64_t value);

  inline  ::int64_t getX2();
  inline void setX2( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TScopeId::Pipeline {
public:
  typedef TScopeId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TGroupInfo::Reader {
public:
  typedef TGroupInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID() const;

  inline  ::uint32_t getGroupGeneration() const;

  inline  ::uint32_t getErasureSpecies() const;

  inline bool hasRings() const;
  inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Reader getRings() const;

  inline  ::EEntityStatus getEntityStatus() const;

  inline  ::uint32_t getEncryptionMode() const;

  inline  ::uint32_t getLifeCyclePhase() const;

  inline bool hasMainKeyId() const;
  inline  ::capnp::Data::Reader getMainKeyId() const;

  inline bool hasEncryptedGroupKey() const;
  inline  ::capnp::Data::Reader getEncryptedGroupKey() const;

  inline  ::uint64_t getGroupKeyNonce() const;

  inline  ::uint64_t getMainKeyVersion() const;

  inline bool hasAcceptedScope() const;
  inline  ::TScopeId::Reader getAcceptedScope() const;

  inline bool hasStoragePoolName() const;
  inline  ::capnp::Text::Reader getStoragePoolName() const;

  inline  ::EPDiskType getDeviceType() const;

  inline  ::uint64_t getBlobDepotId() const;

  inline  ::E getDecommitStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TGroupInfo::Builder {
public:
  typedef TGroupInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID();
  inline void setGroupID( ::uint32_t value);

  inline  ::uint32_t getGroupGeneration();
  inline void setGroupGeneration( ::uint32_t value);

  inline  ::uint32_t getErasureSpecies();
  inline void setErasureSpecies( ::uint32_t value);

  inline bool hasRings();
  inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Builder getRings();
  inline void setRings( ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Builder initRings(unsigned int size);
  inline void adoptRings(::capnp::Orphan< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>> disownRings();

  inline  ::EEntityStatus getEntityStatus();
  inline void setEntityStatus( ::EEntityStatus value);

  inline  ::uint32_t getEncryptionMode();
  inline void setEncryptionMode( ::uint32_t value);

  inline  ::uint32_t getLifeCyclePhase();
  inline void setLifeCyclePhase( ::uint32_t value);

  inline bool hasMainKeyId();
  inline  ::capnp::Data::Builder getMainKeyId();
  inline void setMainKeyId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initMainKeyId(unsigned int size);
  inline void adoptMainKeyId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownMainKeyId();

  inline bool hasEncryptedGroupKey();
  inline  ::capnp::Data::Builder getEncryptedGroupKey();
  inline void setEncryptedGroupKey( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initEncryptedGroupKey(unsigned int size);
  inline void adoptEncryptedGroupKey(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownEncryptedGroupKey();

  inline  ::uint64_t getGroupKeyNonce();
  inline void setGroupKeyNonce( ::uint64_t value);

  inline  ::uint64_t getMainKeyVersion();
  inline void setMainKeyVersion( ::uint64_t value);

  inline bool hasAcceptedScope();
  inline  ::TScopeId::Builder getAcceptedScope();
  inline void setAcceptedScope( ::TScopeId::Reader value);
  inline  ::TScopeId::Builder initAcceptedScope();
  inline void adoptAcceptedScope(::capnp::Orphan< ::TScopeId>&& value);
  inline ::capnp::Orphan< ::TScopeId> disownAcceptedScope();

  inline bool hasStoragePoolName();
  inline  ::capnp::Text::Builder getStoragePoolName();
  inline void setStoragePoolName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStoragePoolName(unsigned int size);
  inline void adoptStoragePoolName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStoragePoolName();

  inline  ::EPDiskType getDeviceType();
  inline void setDeviceType( ::EPDiskType value);

  inline  ::uint64_t getBlobDepotId();
  inline void setBlobDepotId( ::uint64_t value);

  inline  ::E getDecommitStatus();
  inline void setDecommitStatus( ::E value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TGroupInfo::Pipeline {
public:
  typedef TGroupInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TScopeId::Pipeline getAcceptedScope();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TEvVGetResult::Reader {
public:
  typedef TEvVGetResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::EReplyStatus getStatus() const;

  inline bool hasResult() const;
  inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Reader getResult() const;

  inline bool hasVDiskID() const;
  inline  ::TVDiskID::Reader getVDiskID() const;

  inline  ::uint64_t getCookie() const;

  inline bool hasMsgQoS() const;
  inline  ::TMsgQoS::Reader getMsgQoS() const;

  inline  ::uint32_t getBlockedGeneration() const;

  inline bool hasTimestamps() const;
  inline  ::TTimestamps::Reader getTimestamps() const;

  inline bool getIsRangeOverflow() const;

  inline  ::int64_t getIncarnationGuid() const;

  inline bool hasRecentGroup() const;
  inline  ::TGroupInfo::Reader getRecentGroup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TEvVGetResult::Builder {
public:
  typedef TEvVGetResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::EReplyStatus getStatus();
  inline void setStatus( ::EReplyStatus value);

  inline bool hasResult();
  inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Builder getResult();
  inline void setResult( ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Builder initResult(unsigned int size);
  inline void adoptResult(::capnp::Orphan< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>> disownResult();

  inline bool hasVDiskID();
  inline  ::TVDiskID::Builder getVDiskID();
  inline void setVDiskID( ::TVDiskID::Reader value);
  inline  ::TVDiskID::Builder initVDiskID();
  inline void adoptVDiskID(::capnp::Orphan< ::TVDiskID>&& value);
  inline ::capnp::Orphan< ::TVDiskID> disownVDiskID();

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline bool hasMsgQoS();
  inline  ::TMsgQoS::Builder getMsgQoS();
  inline void setMsgQoS( ::TMsgQoS::Reader value);
  inline  ::TMsgQoS::Builder initMsgQoS();
  inline void adoptMsgQoS(::capnp::Orphan< ::TMsgQoS>&& value);
  inline ::capnp::Orphan< ::TMsgQoS> disownMsgQoS();

  inline  ::uint32_t getBlockedGeneration();
  inline void setBlockedGeneration( ::uint32_t value);

  inline bool hasTimestamps();
  inline  ::TTimestamps::Builder getTimestamps();
  inline void setTimestamps( ::TTimestamps::Reader value);
  inline  ::TTimestamps::Builder initTimestamps();
  inline void adoptTimestamps(::capnp::Orphan< ::TTimestamps>&& value);
  inline ::capnp::Orphan< ::TTimestamps> disownTimestamps();

  inline bool getIsRangeOverflow();
  inline void setIsRangeOverflow(bool value);

  inline  ::int64_t getIncarnationGuid();
  inline void setIncarnationGuid( ::int64_t value);

  inline bool hasRecentGroup();
  inline  ::TGroupInfo::Builder getRecentGroup();
  inline void setRecentGroup( ::TGroupInfo::Reader value);
  inline  ::TGroupInfo::Builder initRecentGroup();
  inline void adoptRecentGroup(::capnp::Orphan< ::TGroupInfo>&& value);
  inline ::capnp::Orphan< ::TGroupInfo> disownRecentGroup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TEvVGetResult::Pipeline {
public:
  typedef TEvVGetResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::TVDiskID::Pipeline getVDiskID();
  inline  ::TMsgQoS::Pipeline getMsgQoS();
  inline  ::TTimestamps::Pipeline getTimestamps();
  inline  ::TGroupInfo::Pipeline getRecentGroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TMessageId::Reader::getSequenceId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMessageId::Builder::getSequenceId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TMessageId::Builder::setSequenceId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TMessageId::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMessageId::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TMessageId::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getSentByDSProxyUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getSentByDSProxyUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setSentByDSProxyUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getReceivedByVDiskUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getReceivedByVDiskUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setReceivedByVDiskUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getSentByVDiskUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getSentByVDiskUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setSentByVDiskUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getReceivedByDSProxyUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getReceivedByDSProxyUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setReceivedByDSProxyUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TActorId::Reader::getRawX1() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TActorId::Builder::getRawX1() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TActorId::Builder::setRawX1( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TActorId::Reader::getRawX2() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TActorId::Builder::getRawX2() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TActorId::Builder::setRawX2( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getSubmitTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getSubmitTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setSubmitTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getInSenderQueue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getInSenderQueue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setInSenderQueue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getReceivedTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getReceivedTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setReceivedTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getInQueue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getInQueue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setInQueue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getExecution() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getExecution() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setExecution( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getHugeWriteTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getHugeWriteTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setHugeWriteTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::EStatus TWindowFeedback::Reader::getStatus() const {
  return _reader.getDataField< ::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::EStatus TWindowFeedback::Builder::getStatus() {
  return _builder.getDataField< ::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setStatus( ::EStatus value) {
  _builder.setDataField< ::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TWindowFeedback::Reader::getActualWindowSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TWindowFeedback::Builder::getActualWindowSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setActualWindowSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TWindowFeedback::Reader::getMaxWindowSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TWindowFeedback::Builder::getMaxWindowSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setMaxWindowSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TWindowFeedback::Reader::hasExpectedMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TWindowFeedback::Builder::hasExpectedMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TMessageId::Reader TWindowFeedback::Reader::getExpectedMsgId() const {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TMessageId::Builder TWindowFeedback::Builder::getExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TMessageId::Pipeline TWindowFeedback::Pipeline::getExpectedMsgId() {
  return  ::TMessageId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TWindowFeedback::Builder::setExpectedMsgId( ::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TMessageId::Builder TWindowFeedback::Builder::initExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TWindowFeedback::Builder::adoptExpectedMsgId(
    ::capnp::Orphan< ::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TMessageId> TWindowFeedback::Builder::disownExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TWindowFeedback::Reader::hasFailedMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TWindowFeedback::Builder::hasFailedMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::TMessageId::Reader TWindowFeedback::Reader::getFailedMsgId() const {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::TMessageId::Builder TWindowFeedback::Builder::getFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TMessageId::Pipeline TWindowFeedback::Pipeline::getFailedMsgId() {
  return  ::TMessageId::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TWindowFeedback::Builder::setFailedMsgId( ::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::TMessageId::Builder TWindowFeedback::Builder::initFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TWindowFeedback::Builder::adoptFailedMsgId(
    ::capnp::Orphan< ::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TMessageId> TWindowFeedback::Builder::disownFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TVDiskCostSettings::Reader::getSeekTimeUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getSeekTimeUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setSeekTimeUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getReadSpeedBps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getReadSpeedBps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setReadSpeedBps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getWriteSpeedBps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getWriteSpeedBps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setWriteSpeedBps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getReadBlockSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getReadBlockSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setReadBlockSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getWriteBlockSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getWriteBlockSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setWriteBlockSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskCostSettings::Reader::getMinREALHugeBlobInBytes() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskCostSettings::Builder::getMinREALHugeBlobInBytes() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setMinREALHugeBlobInBytes( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TMsgQoS::Reader::getDeadlineSeconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::Builder::getDeadlineSeconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setDeadlineSeconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TMessageId::Reader TMsgQoS::Reader::getMsgId() const {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TMessageId::Builder TMsgQoS::Builder::getMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TMessageId::Pipeline TMsgQoS::Pipeline::getMsgId() {
  return  ::TMessageId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setMsgId( ::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TMessageId::Builder TMsgQoS::Builder::initMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptMsgId(
    ::capnp::Orphan< ::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TMessageId> TMsgQoS::Builder::disownMsgId() {
  return ::capnp::_::PointerHelpers< ::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TMsgQoS::Reader::getCost() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMsgQoS::Builder::getCost() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setCost( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::EVDiskQueueId TMsgQoS::Reader::getExtQueueId() const {
  return _reader.getDataField< ::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::EVDiskQueueId TMsgQoS::Builder::getExtQueueId() {
  return _builder.getDataField< ::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setExtQueueId( ::EVDiskQueueId value) {
  _builder.setDataField< ::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::EVDiskInternalQueueId TMsgQoS::Reader::getIntQueueId() const {
  return _reader.getDataField< ::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::EVDiskInternalQueueId TMsgQoS::Builder::getIntQueueId() {
  return _builder.getDataField< ::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setIntQueueId( ::EVDiskInternalQueueId value) {
  _builder.setDataField< ::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasCostSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasCostSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::TVDiskCostSettings::Reader TMsgQoS::Reader::getCostSettings() const {
  return ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::TVDiskCostSettings::Builder TMsgQoS::Builder::getCostSettings() {
  return ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TVDiskCostSettings::Pipeline TMsgQoS::Pipeline::getCostSettings() {
  return  ::TVDiskCostSettings::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setCostSettings( ::TVDiskCostSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::TVDiskCostSettings::Builder TMsgQoS::Builder::initCostSettings() {
  return ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptCostSettings(
    ::capnp::Orphan< ::TVDiskCostSettings>&& value) {
  ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TVDiskCostSettings> TMsgQoS::Builder::disownCostSettings() {
  return ::capnp::_::PointerHelpers< ::TVDiskCostSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TMsgQoS::Reader::getSendMeCostSettings() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool TMsgQoS::Builder::getSendMeCostSettings() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setSendMeCostSettings(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasWindow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasWindow() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::TWindowFeedback::Reader TMsgQoS::Reader::getWindow() const {
  return ::capnp::_::PointerHelpers< ::TWindowFeedback>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::TWindowFeedback::Builder TMsgQoS::Builder::getWindow() {
  return ::capnp::_::PointerHelpers< ::TWindowFeedback>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TWindowFeedback::Pipeline TMsgQoS::Pipeline::getWindow() {
  return  ::TWindowFeedback::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setWindow( ::TWindowFeedback::Reader value) {
  ::capnp::_::PointerHelpers< ::TWindowFeedback>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::TWindowFeedback::Builder TMsgQoS::Builder::initWindow() {
  return ::capnp::_::PointerHelpers< ::TWindowFeedback>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptWindow(
    ::capnp::Orphan< ::TWindowFeedback>&& value) {
  ::capnp::_::PointerHelpers< ::TWindowFeedback>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TWindowFeedback> TMsgQoS::Builder::disownWindow() {
  return ::capnp::_::PointerHelpers< ::TWindowFeedback>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t TMsgQoS::Reader::getProxyNodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::Builder::getProxyNodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setProxyNodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TMsgQoS::Reader::getReplVDiskId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::Builder::getReplVDiskId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setReplVDiskId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TMsgQoS::Reader::getVDiskLoadId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMsgQoS::Builder::getVDiskLoadId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setVDiskLoadId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TMsgQoS::Reader::getVPatchVDiskId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::Builder::getVPatchVDiskId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setVPatchVDiskId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasExecTimeStats() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasExecTimeStats() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::TExecTimeStats::Reader TMsgQoS::Reader::getExecTimeStats() const {
  return ::capnp::_::PointerHelpers< ::TExecTimeStats>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::TExecTimeStats::Builder TMsgQoS::Builder::getExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::TExecTimeStats>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TExecTimeStats::Pipeline TMsgQoS::Pipeline::getExecTimeStats() {
  return  ::TExecTimeStats::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setExecTimeStats( ::TExecTimeStats::Reader value) {
  ::capnp::_::PointerHelpers< ::TExecTimeStats>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::TExecTimeStats::Builder TMsgQoS::Builder::initExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::TExecTimeStats>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptExecTimeStats(
    ::capnp::Orphan< ::TExecTimeStats>&& value) {
  ::capnp::_::PointerHelpers< ::TExecTimeStats>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TExecTimeStats> TMsgQoS::Builder::disownExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::TExecTimeStats>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TMsgQoS::Reader::hasSenderActorId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasSenderActorId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::TActorId::Reader TMsgQoS::Reader::getSenderActorId() const {
  return ::capnp::_::PointerHelpers< ::TActorId>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::TActorId::Builder TMsgQoS::Builder::getSenderActorId() {
  return ::capnp::_::PointerHelpers< ::TActorId>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TActorId::Pipeline TMsgQoS::Pipeline::getSenderActorId() {
  return  ::TActorId::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setSenderActorId( ::TActorId::Reader value) {
  ::capnp::_::PointerHelpers< ::TActorId>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::TActorId::Builder TMsgQoS::Builder::initSenderActorId() {
  return ::capnp::_::PointerHelpers< ::TActorId>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptSenderActorId(
    ::capnp::Orphan< ::TActorId>&& value) {
  ::capnp::_::PointerHelpers< ::TActorId>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TActorId> TMsgQoS::Builder::disownSenderActorId() {
  return ::capnp::_::PointerHelpers< ::TActorId>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t TVDiskID::Reader::getGroupID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getGroupID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setGroupID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getGroupGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getGroupGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setGroupGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getRing() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getRing() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setRing( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getDomain() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getDomain() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setDomain( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getVDisk() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getVDisk() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setVDisk( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TLogoBlobID::Reader::getRawX1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TLogoBlobID::Builder::getRawX1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TLogoBlobID::Reader::getRawX2() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TLogoBlobID::Builder::getRawX2() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX2( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TLogoBlobID::Reader::getRawX3() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TLogoBlobID::Builder::getRawX3() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX3( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TRangeQuery::Reader::hasFrom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TRangeQuery::Builder::hasFrom() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TLogoBlobID::Reader TRangeQuery::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TLogoBlobID::Builder TRangeQuery::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TLogoBlobID::Pipeline TRangeQuery::Pipeline::getFrom() {
  return  ::TLogoBlobID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TRangeQuery::Builder::setFrom( ::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TLogoBlobID::Builder TRangeQuery::Builder::initFrom() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TRangeQuery::Builder::adoptFrom(
    ::capnp::Orphan< ::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TLogoBlobID> TRangeQuery::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TRangeQuery::Reader::hasTo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TRangeQuery::Builder::hasTo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::TLogoBlobID::Reader TRangeQuery::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::TLogoBlobID::Builder TRangeQuery::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TLogoBlobID::Pipeline TRangeQuery::Pipeline::getTo() {
  return  ::TLogoBlobID::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TRangeQuery::Builder::setTo( ::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::TLogoBlobID::Builder TRangeQuery::Builder::initTo() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TRangeQuery::Builder::adoptTo(
    ::capnp::Orphan< ::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TLogoBlobID> TRangeQuery::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TRangeQuery::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TRangeQuery::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TRangeQuery::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TRangeQuery::Reader::getMaxResults() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TRangeQuery::Builder::getMaxResults() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TRangeQuery::Builder::setMaxResults( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TExtremeQuery::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TExtremeQuery::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TLogoBlobID::Reader TExtremeQuery::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TLogoBlobID::Builder TExtremeQuery::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TLogoBlobID::Pipeline TExtremeQuery::Pipeline::getId() {
  return  ::TLogoBlobID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TExtremeQuery::Builder::setId( ::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TLogoBlobID::Builder TExtremeQuery::Builder::initId() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TExtremeQuery::Builder::adoptId(
    ::capnp::Orphan< ::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TLogoBlobID> TExtremeQuery::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TExtremeQuery::Reader::getShift() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getShift() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setShift( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExtremeQuery::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExtremeQuery::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTabletData::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTabletData::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TTabletData::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TTabletData::Reader::getGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TTabletData::Builder::getGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TTabletData::Builder::setGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasRangeQuery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasRangeQuery() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TRangeQuery::Reader TEvVGet::Reader::getRangeQuery() const {
  return ::capnp::_::PointerHelpers< ::TRangeQuery>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TRangeQuery::Builder TEvVGet::Builder::getRangeQuery() {
  return ::capnp::_::PointerHelpers< ::TRangeQuery>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TRangeQuery::Pipeline TEvVGet::Pipeline::getRangeQuery() {
  return  ::TRangeQuery::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setRangeQuery( ::TRangeQuery::Reader value) {
  ::capnp::_::PointerHelpers< ::TRangeQuery>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TRangeQuery::Builder TEvVGet::Builder::initRangeQuery() {
  return ::capnp::_::PointerHelpers< ::TRangeQuery>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptRangeQuery(
    ::capnp::Orphan< ::TRangeQuery>&& value) {
  ::capnp::_::PointerHelpers< ::TRangeQuery>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TRangeQuery> TEvVGet::Builder::disownRangeQuery() {
  return ::capnp::_::PointerHelpers< ::TRangeQuery>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasExtremeQueries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasExtremeQueries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader TEvVGet::Reader::getExtremeQueries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder TEvVGet::Builder::getExtremeQueries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::setExtremeQueries( ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder TEvVGet::Builder::initExtremeQueries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TEvVGet::Builder::adoptExtremeQueries(
    ::capnp::Orphan< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>> TEvVGet::Builder::disownExtremeQueries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TExtremeQuery,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasVDiskID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasVDiskID() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::TVDiskID::Reader TEvVGet::Reader::getVDiskID() const {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::TVDiskID::Builder TEvVGet::Builder::getVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TVDiskID::Pipeline TEvVGet::Pipeline::getVDiskID() {
  return  ::TVDiskID::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setVDiskID( ::TVDiskID::Reader value) {
  ::capnp::_::PointerHelpers< ::TVDiskID>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::TVDiskID::Builder TEvVGet::Builder::initVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptVDiskID(
    ::capnp::Orphan< ::TVDiskID>&& value) {
  ::capnp::_::PointerHelpers< ::TVDiskID>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TVDiskID> TEvVGet::Builder::disownVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::getNotifyIfNotReady() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getNotifyIfNotReady() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setNotifyIfNotReady(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getShowInternals() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getShowInternals() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setShowInternals(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TEvVGet::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TEvVGet::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasMsgQoS() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasMsgQoS() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::TMsgQoS::Reader TEvVGet::Reader::getMsgQoS() const {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::TMsgQoS::Builder TEvVGet::Builder::getMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TMsgQoS::Pipeline TEvVGet::Pipeline::getMsgQoS() {
  return  ::TMsgQoS::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setMsgQoS( ::TMsgQoS::Reader value) {
  ::capnp::_::PointerHelpers< ::TMsgQoS>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::TMsgQoS::Builder TEvVGet::Builder::initMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptMsgQoS(
    ::capnp::Orphan< ::TMsgQoS>&& value) {
  ::capnp::_::PointerHelpers< ::TMsgQoS>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TMsgQoS> TEvVGet::Builder::disownMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::getIndexOnly() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getIndexOnly() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setIndexOnly(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::EGetHandleClass TEvVGet::Reader::getHandleClass() const {
  return _reader.getDataField< ::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::EGetHandleClass TEvVGet::Builder::getHandleClass() {
  return _builder.getDataField< ::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setHandleClass( ::EGetHandleClass value) {
  _builder.setDataField< ::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getSuppressBarrierCheck() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getSuppressBarrierCheck() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setSuppressBarrierCheck(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TEvVGet::Reader::getTabletId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TEvVGet::Builder::getTabletId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setTabletId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getAcquireBlockedGeneration() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getAcquireBlockedGeneration() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setAcquireBlockedGeneration(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasTimestamps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasTimestamps() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::TTimestamps::Reader TEvVGet::Reader::getTimestamps() const {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::TTimestamps::Builder TEvVGet::Builder::getTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TTimestamps::Pipeline TEvVGet::Pipeline::getTimestamps() {
  return  ::TTimestamps::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setTimestamps( ::TTimestamps::Reader value) {
  ::capnp::_::PointerHelpers< ::TTimestamps>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::TTimestamps::Builder TEvVGet::Builder::initTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptTimestamps(
    ::capnp::Orphan< ::TTimestamps>&& value) {
  ::capnp::_::PointerHelpers< ::TTimestamps>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TTimestamps> TEvVGet::Builder::disownTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t TEvVGet::Reader::getForceBlockedGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TEvVGet::Builder::getForceBlockedGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setForceBlockedGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasReaderTabletData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasReaderTabletData() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::TTabletData::Reader TEvVGet::Reader::getReaderTabletData() const {
  return ::capnp::_::PointerHelpers< ::TTabletData>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::TTabletData::Builder TEvVGet::Builder::getReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TTabletData::Pipeline TEvVGet::Pipeline::getReaderTabletData() {
  return  ::TTabletData::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setReaderTabletData( ::TTabletData::Reader value) {
  ::capnp::_::PointerHelpers< ::TTabletData>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::TTabletData::Builder TEvVGet::Builder::initReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptReaderTabletData(
    ::capnp::Orphan< ::TTabletData>&& value) {
  ::capnp::_::PointerHelpers< ::TTabletData>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TTabletData> TEvVGet::Builder::disownReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasForceBlockTabletData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasForceBlockTabletData() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::TTabletData::Reader TEvVGet::Reader::getForceBlockTabletData() const {
  return ::capnp::_::PointerHelpers< ::TTabletData>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::TTabletData::Builder TEvVGet::Builder::getForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TTabletData::Pipeline TEvVGet::Pipeline::getForceBlockTabletData() {
  return  ::TTabletData::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setForceBlockTabletData( ::TTabletData::Reader value) {
  ::capnp::_::PointerHelpers< ::TTabletData>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::TTabletData::Builder TEvVGet::Builder::initForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptForceBlockTabletData(
    ::capnp::Orphan< ::TTabletData>&& value) {
  ::capnp::_::PointerHelpers< ::TTabletData>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TTabletData> TEvVGet::Builder::disownForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::TTabletData>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasSnapshotId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasSnapshotId() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TEvVGet::Reader::getSnapshotId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TEvVGet::Builder::getSnapshotId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::setSnapshotId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TEvVGet::Builder::initSnapshotId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void TEvVGet::Builder::adoptSnapshotId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TEvVGet::Builder::disownSnapshotId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::EReplyStatus TQueryResult::Reader::getStatus() const {
  return _reader.getDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::EReplyStatus TQueryResult::Builder::getStatus() {
  return _builder.getDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setStatus( ::EReplyStatus value) {
  _builder.setDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TQueryResult::Reader::hasBlobID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TQueryResult::Builder::hasBlobID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::TLogoBlobID::Reader TQueryResult::Reader::getBlobID() const {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::TLogoBlobID::Builder TQueryResult::Builder::getBlobID() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TLogoBlobID::Pipeline TQueryResult::Pipeline::getBlobID() {
  return  ::TLogoBlobID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TQueryResult::Builder::setBlobID( ::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::TLogoBlobID::Builder TQueryResult::Builder::initBlobID() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TQueryResult::Builder::adoptBlobID(
    ::capnp::Orphan< ::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TLogoBlobID> TQueryResult::Builder::disownBlobID() {
  return ::capnp::_::PointerHelpers< ::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TQueryResult::Reader::getShift() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TQueryResult::Builder::getShift() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setShift( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TQueryResult::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TQueryResult::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TQueryResult::Reader::hasSuffer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TQueryResult::Builder::hasSuffer() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TQueryResult::Reader::getSuffer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TQueryResult::Builder::getSuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TQueryResult::Builder::setSuffer( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TQueryResult::Builder::initSuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TQueryResult::Builder::adoptSuffer(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TQueryResult::Builder::disownSuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TQueryResult::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TQueryResult::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TQueryResult::Reader::getFullDataSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TQueryResult::Builder::getFullDataSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setFullDataSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TQueryResult::Reader::getIngress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TQueryResult::Builder::getIngress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setIngress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TQueryResult::Reader::hasParts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TQueryResult::Builder::hasParts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader TQueryResult::Reader::getParts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TQueryResult::Builder::getParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TQueryResult::Builder::setParts( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void TQueryResult::Builder::setParts(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TQueryResult::Builder::initParts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TQueryResult::Builder::adoptParts(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> TQueryResult::Builder::disownParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TQueryResult::Reader::getKeep() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool TQueryResult::Builder::getKeep() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setKeep(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool TQueryResult::Reader::getDoNotKeep() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool TQueryResult::Builder::getDoNotKeep() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void TQueryResult::Builder::setDoNotKeep(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskLocation::Reader::getNodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskLocation::Builder::getNodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TVDiskLocation::Builder::setNodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskLocation::Reader::getPDiskId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskLocation::Builder::getPDiskId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TVDiskLocation::Builder::setPDiskId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskLocation::Reader::getVDiskSlotId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskLocation::Builder::getVDiskSlotId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskLocation::Builder::setVDiskSlotId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskLocation::Reader::getPDiskGuid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskLocation::Builder::getPDiskGuid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskLocation::Builder::setPDiskGuid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TFailDomain::Reader::hasVDiskLocations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TFailDomain::Builder::hasVDiskLocations() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Reader TFailDomain::Reader::getVDiskLocations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Builder TFailDomain::Builder::getVDiskLocations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TFailDomain::Builder::setVDiskLocations( ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>::Builder TFailDomain::Builder::initVDiskLocations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TFailDomain::Builder::adoptVDiskLocations(
    ::capnp::Orphan< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>> TFailDomain::Builder::disownVDiskLocations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TVDiskLocation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TFailDomain::Reader::hasFailDomains() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TFailDomain::Builder::hasFailDomains() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader TFailDomain::Reader::getFailDomains() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder TFailDomain::Builder::getFailDomains() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TFailDomain::Builder::setFailDomains( ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder TFailDomain::Builder::initFailDomains(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TFailDomain::Builder::adoptFailDomains(
    ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>> TFailDomain::Builder::disownFailDomains() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TFailRealm::Reader::hasFailDomains() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TFailRealm::Builder::hasFailDomains() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader TFailRealm::Reader::getFailDomains() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder TFailRealm::Builder::getFailDomains() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TFailRealm::Builder::setFailDomains( ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>::Builder TFailRealm::Builder::initFailDomains(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TFailRealm::Builder::adoptFailDomains(
    ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>> TFailRealm::Builder::disownFailDomains() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailDomain,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t TScopeId::Reader::getX1() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TScopeId::Builder::getX1() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TScopeId::Builder::setX1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TScopeId::Reader::getX2() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TScopeId::Builder::getX2() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TScopeId::Builder::setX2( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TGroupInfo::Reader::getGroupID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TGroupInfo::Builder::getGroupID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setGroupID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TGroupInfo::Reader::getGroupGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TGroupInfo::Builder::getGroupGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setGroupGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TGroupInfo::Reader::getErasureSpecies() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TGroupInfo::Builder::getErasureSpecies() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setErasureSpecies( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TGroupInfo::Reader::hasRings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TGroupInfo::Builder::hasRings() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Reader TGroupInfo::Reader::getRings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Builder TGroupInfo::Builder::getRings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TGroupInfo::Builder::setRings( ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>::Builder TGroupInfo::Builder::initRings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TGroupInfo::Builder::adoptRings(
    ::capnp::Orphan< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>> TGroupInfo::Builder::disownRings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TFailRealm,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::EEntityStatus TGroupInfo::Reader::getEntityStatus() const {
  return _reader.getDataField< ::EEntityStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::EEntityStatus TGroupInfo::Builder::getEntityStatus() {
  return _builder.getDataField< ::EEntityStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setEntityStatus( ::EEntityStatus value) {
  _builder.setDataField< ::EEntityStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TGroupInfo::Reader::getEncryptionMode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TGroupInfo::Builder::getEncryptionMode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setEncryptionMode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TGroupInfo::Reader::getLifeCyclePhase() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TGroupInfo::Builder::getLifeCyclePhase() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setLifeCyclePhase( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TGroupInfo::Reader::hasMainKeyId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TGroupInfo::Builder::hasMainKeyId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TGroupInfo::Reader::getMainKeyId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_a7264e341943aefb + 203);
}
inline  ::capnp::Data::Builder TGroupInfo::Builder::getMainKeyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_a7264e341943aefb + 203);
}
inline void TGroupInfo::Builder::setMainKeyId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TGroupInfo::Builder::initMainKeyId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TGroupInfo::Builder::adoptMainKeyId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TGroupInfo::Builder::disownMainKeyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TGroupInfo::Reader::hasEncryptedGroupKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TGroupInfo::Builder::hasEncryptedGroupKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TGroupInfo::Reader::getEncryptedGroupKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_a7264e341943aefb + 213);
}
inline  ::capnp::Data::Builder TGroupInfo::Builder::getEncryptedGroupKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_a7264e341943aefb + 213);
}
inline void TGroupInfo::Builder::setEncryptedGroupKey( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TGroupInfo::Builder::initEncryptedGroupKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TGroupInfo::Builder::adoptEncryptedGroupKey(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TGroupInfo::Builder::disownEncryptedGroupKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t TGroupInfo::Reader::getGroupKeyNonce() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TGroupInfo::Builder::getGroupKeyNonce() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setGroupKeyNonce( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TGroupInfo::Reader::getMainKeyVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TGroupInfo::Builder::getMainKeyVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setMainKeyVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TGroupInfo::Reader::hasAcceptedScope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TGroupInfo::Builder::hasAcceptedScope() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::TScopeId::Reader TGroupInfo::Reader::getAcceptedScope() const {
  return ::capnp::_::PointerHelpers< ::TScopeId>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::TScopeId::Builder TGroupInfo::Builder::getAcceptedScope() {
  return ::capnp::_::PointerHelpers< ::TScopeId>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TScopeId::Pipeline TGroupInfo::Pipeline::getAcceptedScope() {
  return  ::TScopeId::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TGroupInfo::Builder::setAcceptedScope( ::TScopeId::Reader value) {
  ::capnp::_::PointerHelpers< ::TScopeId>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::TScopeId::Builder TGroupInfo::Builder::initAcceptedScope() {
  return ::capnp::_::PointerHelpers< ::TScopeId>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TGroupInfo::Builder::adoptAcceptedScope(
    ::capnp::Orphan< ::TScopeId>&& value) {
  ::capnp::_::PointerHelpers< ::TScopeId>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TScopeId> TGroupInfo::Builder::disownAcceptedScope() {
  return ::capnp::_::PointerHelpers< ::TScopeId>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TGroupInfo::Reader::hasStoragePoolName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TGroupInfo::Builder::hasStoragePoolName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TGroupInfo::Reader::getStoragePoolName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TGroupInfo::Builder::getStoragePoolName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TGroupInfo::Builder::setStoragePoolName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TGroupInfo::Builder::initStoragePoolName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TGroupInfo::Builder::adoptStoragePoolName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TGroupInfo::Builder::disownStoragePoolName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::EPDiskType TGroupInfo::Reader::getDeviceType() const {
  return _reader.getDataField< ::EPDiskType>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::EPDiskType TGroupInfo::Builder::getDeviceType() {
  return _builder.getDataField< ::EPDiskType>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setDeviceType( ::EPDiskType value) {
  _builder.setDataField< ::EPDiskType>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TGroupInfo::Reader::getBlobDepotId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TGroupInfo::Builder::getBlobDepotId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setBlobDepotId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::E TGroupInfo::Reader::getDecommitStatus() const {
  return _reader.getDataField< ::E>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::E TGroupInfo::Builder::getDecommitStatus() {
  return _builder.getDataField< ::E>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void TGroupInfo::Builder::setDecommitStatus( ::E value) {
  _builder.setDataField< ::E>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::EReplyStatus TEvVGetResult::Reader::getStatus() const {
  return _reader.getDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::EReplyStatus TEvVGetResult::Builder::getStatus() {
  return _builder.getDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TEvVGetResult::Builder::setStatus( ::EReplyStatus value) {
  _builder.setDataField< ::EReplyStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGetResult::Reader::hasResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGetResult::Builder::hasResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Reader TEvVGetResult::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Builder TEvVGetResult::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TEvVGetResult::Builder::setResult( ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>::Builder TEvVGetResult::Builder::initResult(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TEvVGetResult::Builder::adoptResult(
    ::capnp::Orphan< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>> TEvVGetResult::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::TQueryResult,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TEvVGetResult::Reader::hasVDiskID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGetResult::Builder::hasVDiskID() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::TVDiskID::Reader TEvVGetResult::Reader::getVDiskID() const {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::TVDiskID::Builder TEvVGetResult::Builder::getVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TVDiskID::Pipeline TEvVGetResult::Pipeline::getVDiskID() {
  return  ::TVDiskID::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TEvVGetResult::Builder::setVDiskID( ::TVDiskID::Reader value) {
  ::capnp::_::PointerHelpers< ::TVDiskID>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::TVDiskID::Builder TEvVGetResult::Builder::initVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TEvVGetResult::Builder::adoptVDiskID(
    ::capnp::Orphan< ::TVDiskID>&& value) {
  ::capnp::_::PointerHelpers< ::TVDiskID>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TVDiskID> TEvVGetResult::Builder::disownVDiskID() {
  return ::capnp::_::PointerHelpers< ::TVDiskID>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TEvVGetResult::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TEvVGetResult::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGetResult::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGetResult::Reader::hasMsgQoS() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGetResult::Builder::hasMsgQoS() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::TMsgQoS::Reader TEvVGetResult::Reader::getMsgQoS() const {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::TMsgQoS::Builder TEvVGetResult::Builder::getMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TMsgQoS::Pipeline TEvVGetResult::Pipeline::getMsgQoS() {
  return  ::TMsgQoS::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TEvVGetResult::Builder::setMsgQoS( ::TMsgQoS::Reader value) {
  ::capnp::_::PointerHelpers< ::TMsgQoS>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::TMsgQoS::Builder TEvVGetResult::Builder::initMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TEvVGetResult::Builder::adoptMsgQoS(
    ::capnp::Orphan< ::TMsgQoS>&& value) {
  ::capnp::_::PointerHelpers< ::TMsgQoS>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TMsgQoS> TEvVGetResult::Builder::disownMsgQoS() {
  return ::capnp::_::PointerHelpers< ::TMsgQoS>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t TEvVGetResult::Reader::getBlockedGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TEvVGetResult::Builder::getBlockedGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGetResult::Builder::setBlockedGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGetResult::Reader::hasTimestamps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGetResult::Builder::hasTimestamps() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::TTimestamps::Reader TEvVGetResult::Reader::getTimestamps() const {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::TTimestamps::Builder TEvVGetResult::Builder::getTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TTimestamps::Pipeline TEvVGetResult::Pipeline::getTimestamps() {
  return  ::TTimestamps::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TEvVGetResult::Builder::setTimestamps( ::TTimestamps::Reader value) {
  ::capnp::_::PointerHelpers< ::TTimestamps>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::TTimestamps::Builder TEvVGetResult::Builder::initTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TEvVGetResult::Builder::adoptTimestamps(
    ::capnp::Orphan< ::TTimestamps>&& value) {
  ::capnp::_::PointerHelpers< ::TTimestamps>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TTimestamps> TEvVGetResult::Builder::disownTimestamps() {
  return ::capnp::_::PointerHelpers< ::TTimestamps>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TEvVGetResult::Reader::getIsRangeOverflow() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool TEvVGetResult::Builder::getIsRangeOverflow() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TEvVGetResult::Builder::setIsRangeOverflow(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TEvVGetResult::Reader::getIncarnationGuid() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TEvVGetResult::Builder::getIncarnationGuid() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TEvVGetResult::Builder::setIncarnationGuid( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGetResult::Reader::hasRecentGroup() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGetResult::Builder::hasRecentGroup() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::TGroupInfo::Reader TEvVGetResult::Reader::getRecentGroup() const {
  return ::capnp::_::PointerHelpers< ::TGroupInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::TGroupInfo::Builder TEvVGetResult::Builder::getRecentGroup() {
  return ::capnp::_::PointerHelpers< ::TGroupInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TGroupInfo::Pipeline TEvVGetResult::Pipeline::getRecentGroup() {
  return  ::TGroupInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TEvVGetResult::Builder::setRecentGroup( ::TGroupInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::TGroupInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::TGroupInfo::Builder TEvVGetResult::Builder::initRecentGroup() {
  return ::capnp::_::PointerHelpers< ::TGroupInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TEvVGetResult::Builder::adoptRecentGroup(
    ::capnp::Orphan< ::TGroupInfo>&& value) {
  ::capnp::_::PointerHelpers< ::TGroupInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TGroupInfo> TEvVGetResult::Builder::disownRecentGroup() {
  return ::capnp::_::PointerHelpers< ::TGroupInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

