// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protos.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8b9f7db54495d5e3);
CAPNP_DECLARE_SCHEMA(dc68f0fb7c3ef97f);
CAPNP_DECLARE_SCHEMA(800c2ab5bd05310e);
enum class EGetHandleClass_800c2ab5bd05310e: uint16_t {
  NOT_SET,
  ASYNC_READ,
  FAST_READ,
  DISCOVER,
  LOW_READ,
};
CAPNP_DECLARE_ENUM(EGetHandleClass, 800c2ab5bd05310e);
CAPNP_DECLARE_SCHEMA(e3a4e559fd66c3fc);
CAPNP_DECLARE_SCHEMA(e99970013a879a03);
CAPNP_DECLARE_SCHEMA(a2998e52fecfdbd8);
enum class EStatus_a2998e52fecfdbd8: uint16_t {
  NOT_SET,
  UNKNOWN,
  SUCCESS,
  WINDOW_UPDATE,
  PROCESSED,
  INCORRECT_MSG_ID,
  HIGH_WATERMARK_OVERFLOW,
};
CAPNP_DECLARE_ENUM(EStatus, a2998e52fecfdbd8);
CAPNP_DECLARE_SCHEMA(98b2e144d5af38a2);
CAPNP_DECLARE_SCHEMA(8ce14d7b4df78529);
enum class EVDiskQueueId_8ce14d7b4df78529: uint16_t {
  NOT_SET,
  UNKNOWN,
  PUT_TABLET_LOG,
  PUT_ASYNC_BLOB,
  PUT_USER_DATA,
  GET_ASYNC_READ,
  GET_FAST_READ,
  GET_DISCOVER,
  GET_LOW_READ,
  BEGIN,
  END,
};
CAPNP_DECLARE_ENUM(EVDiskQueueId, 8ce14d7b4df78529);
CAPNP_DECLARE_SCHEMA(edcd398b69337951);
enum class EVDiskInternalQueueId_edcd398b69337951: uint16_t {
  NOT_SET,
  INT_UNKNOWN,
  INT_BEGIN,
  INT_GET_ASYNC,
  INT_GET_FAST,
  INT_PUT_LOG,
  INT_PUT_HUGE_FOREGROUND,
  INT_PUT_HUGE_BACKGROUND,
  INT_GET_DISCOVER,
  INT_LOW_READ,
  INT_END,
};
CAPNP_DECLARE_ENUM(EVDiskInternalQueueId, edcd398b69337951);
CAPNP_DECLARE_SCHEMA(c7aafd206149c754);
CAPNP_DECLARE_SCHEMA(a65cf99a6bc147e9);
CAPNP_DECLARE_SCHEMA(c317f629b0412aa4);
CAPNP_DECLARE_SCHEMA(cbc774fe09db0fc6);
CAPNP_DECLARE_SCHEMA(ca26890c49784956);
CAPNP_DECLARE_SCHEMA(8024543960aeda38);
CAPNP_DECLARE_SCHEMA(ab581207b27344a4);
CAPNP_DECLARE_SCHEMA(f41dd81a2d625ca8);
CAPNP_DECLARE_SCHEMA(d2d0a17d730f48ec);

}  // namespace schemas
}  // namespace capnp

namespace NKikimrCapnProto_ {

struct TMessageId {
  TMessageId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b9f7db54495d5e3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TTimestamps {
  TTimestamps() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc68f0fb7c3ef97f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EGetHandleClass_800c2ab5bd05310e EGetHandleClass;

struct TActorId {
  TActorId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3a4e559fd66c3fc, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TExecTimeStats {
  TExecTimeStats() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e99970013a879a03, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EStatus_a2998e52fecfdbd8 EStatus;

struct TWindowFeedback {
  TWindowFeedback() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98b2e144d5af38a2, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::EVDiskQueueId_8ce14d7b4df78529 EVDiskQueueId;

typedef ::capnp::schemas::EVDiskInternalQueueId_edcd398b69337951 EVDiskInternalQueueId;

struct TVDiskCostSettings {
  TVDiskCostSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7aafd206149c754, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TMsgQoS {
  TMsgQoS() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ClientID;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a65cf99a6bc147e9, 4, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TMsgQoS::ClientID {
  ClientID() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PROXY_NODE_ID,
    REPL_V_DISK_ID,
    V_DISK_LOAD_ID,
    V_PATCH_V_DISK_ID,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c317f629b0412aa4, 4, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TVDiskID {
  TVDiskID() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbc774fe09db0fc6, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TLogoBlobID {
  TLogoBlobID() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca26890c49784956, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TRangeQuery {
  TRangeQuery() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8024543960aeda38, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TExtremeQuery {
  TExtremeQuery() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab581207b27344a4, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TTabletData {
  TTabletData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f41dd81a2d625ca8, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TEvVGet {
  TEvVGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2d0a17d730f48ec, 3, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TMessageId::Reader {
public:
  typedef TMessageId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSequenceId() const;

  inline  ::uint64_t getMsgId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TMessageId::Builder {
public:
  typedef TMessageId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSequenceId();
  inline void setSequenceId( ::uint64_t value);

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TMessageId::Pipeline {
public:
  typedef TMessageId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TTimestamps::Reader {
public:
  typedef TTimestamps Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSentByDSProxyUs() const;

  inline  ::uint64_t getReceivedByVDiskUs() const;

  inline  ::uint64_t getSentByVDiskUs() const;

  inline  ::uint64_t getReceivedByDSProxyUs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TTimestamps::Builder {
public:
  typedef TTimestamps Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSentByDSProxyUs();
  inline void setSentByDSProxyUs( ::uint64_t value);

  inline  ::uint64_t getReceivedByVDiskUs();
  inline void setReceivedByVDiskUs( ::uint64_t value);

  inline  ::uint64_t getSentByVDiskUs();
  inline void setSentByVDiskUs( ::uint64_t value);

  inline  ::uint64_t getReceivedByDSProxyUs();
  inline void setReceivedByDSProxyUs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TTimestamps::Pipeline {
public:
  typedef TTimestamps Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TActorId::Reader {
public:
  typedef TActorId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1() const;

  inline  ::uint64_t getRawX2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TActorId::Builder {
public:
  typedef TActorId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1();
  inline void setRawX1( ::uint64_t value);

  inline  ::uint64_t getRawX2();
  inline void setRawX2( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TActorId::Pipeline {
public:
  typedef TActorId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TExecTimeStats::Reader {
public:
  typedef TExecTimeStats Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSubmitTimestamp() const;

  inline  ::uint64_t getInSenderQueue() const;

  inline  ::uint64_t getReceivedTimestamp() const;

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getInQueue() const;

  inline  ::uint64_t getExecution() const;

  inline  ::uint64_t getHugeWriteTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TExecTimeStats::Builder {
public:
  typedef TExecTimeStats Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSubmitTimestamp();
  inline void setSubmitTimestamp( ::uint64_t value);

  inline  ::uint64_t getInSenderQueue();
  inline void setInSenderQueue( ::uint64_t value);

  inline  ::uint64_t getReceivedTimestamp();
  inline void setReceivedTimestamp( ::uint64_t value);

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getInQueue();
  inline void setInQueue( ::uint64_t value);

  inline  ::uint64_t getExecution();
  inline void setExecution( ::uint64_t value);

  inline  ::uint64_t getHugeWriteTime();
  inline void setHugeWriteTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TExecTimeStats::Pipeline {
public:
  typedef TExecTimeStats Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TWindowFeedback::Reader {
public:
  typedef TWindowFeedback Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::NKikimrCapnProto_::EStatus getStatus() const;

  inline  ::uint64_t getActualWindowSize() const;

  inline  ::uint64_t getMaxWindowSize() const;

  inline bool hasExpectedMsgId() const;
  inline  ::NKikimrCapnProto_::TMessageId::Reader getExpectedMsgId() const;

  inline bool hasFailedMsgId() const;
  inline  ::NKikimrCapnProto_::TMessageId::Reader getFailedMsgId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TWindowFeedback::Builder {
public:
  typedef TWindowFeedback Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::NKikimrCapnProto_::EStatus getStatus();
  inline void setStatus( ::NKikimrCapnProto_::EStatus value);

  inline  ::uint64_t getActualWindowSize();
  inline void setActualWindowSize( ::uint64_t value);

  inline  ::uint64_t getMaxWindowSize();
  inline void setMaxWindowSize( ::uint64_t value);

  inline bool hasExpectedMsgId();
  inline  ::NKikimrCapnProto_::TMessageId::Builder getExpectedMsgId();
  inline void setExpectedMsgId( ::NKikimrCapnProto_::TMessageId::Reader value);
  inline  ::NKikimrCapnProto_::TMessageId::Builder initExpectedMsgId();
  inline void adoptExpectedMsgId(::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> disownExpectedMsgId();

  inline bool hasFailedMsgId();
  inline  ::NKikimrCapnProto_::TMessageId::Builder getFailedMsgId();
  inline void setFailedMsgId( ::NKikimrCapnProto_::TMessageId::Reader value);
  inline  ::NKikimrCapnProto_::TMessageId::Builder initFailedMsgId();
  inline void adoptFailedMsgId(::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> disownFailedMsgId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TWindowFeedback::Pipeline {
public:
  typedef TWindowFeedback Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::NKikimrCapnProto_::TMessageId::Pipeline getExpectedMsgId();
  inline  ::NKikimrCapnProto_::TMessageId::Pipeline getFailedMsgId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TVDiskCostSettings::Reader {
public:
  typedef TVDiskCostSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSeekTimeUs() const;

  inline  ::uint64_t getReadSpeedBps() const;

  inline  ::uint64_t getWriteSpeedBps() const;

  inline  ::uint64_t getReadBlockSize() const;

  inline  ::uint64_t getWriteBlockSize() const;

  inline  ::uint32_t getMinREALHugeBlobInBytes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TVDiskCostSettings::Builder {
public:
  typedef TVDiskCostSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSeekTimeUs();
  inline void setSeekTimeUs( ::uint64_t value);

  inline  ::uint64_t getReadSpeedBps();
  inline void setReadSpeedBps( ::uint64_t value);

  inline  ::uint64_t getWriteSpeedBps();
  inline void setWriteSpeedBps( ::uint64_t value);

  inline  ::uint64_t getReadBlockSize();
  inline void setReadBlockSize( ::uint64_t value);

  inline  ::uint64_t getWriteBlockSize();
  inline void setWriteBlockSize( ::uint64_t value);

  inline  ::uint32_t getMinREALHugeBlobInBytes();
  inline void setMinREALHugeBlobInBytes( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TVDiskCostSettings::Pipeline {
public:
  typedef TVDiskCostSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TMsgQoS::Reader {
public:
  typedef TMsgQoS Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDeadlineSeconds() const;

  inline bool hasMsgId() const;
  inline  ::NKikimrCapnProto_::TMessageId::Reader getMsgId() const;

  inline  ::uint64_t getCost() const;

  inline  ::NKikimrCapnProto_::EVDiskQueueId getExtQueueId() const;

  inline  ::NKikimrCapnProto_::EVDiskInternalQueueId getIntQueueId() const;

  inline bool hasCostSettings() const;
  inline  ::NKikimrCapnProto_::TVDiskCostSettings::Reader getCostSettings() const;

  inline bool getSendMeCostSettings() const;

  inline bool hasWindow() const;
  inline  ::NKikimrCapnProto_::TWindowFeedback::Reader getWindow() const;

  inline typename ClientID::Reader getClientID() const;

  inline bool hasExecTimeStats() const;
  inline  ::NKikimrCapnProto_::TExecTimeStats::Reader getExecTimeStats() const;

  inline bool hasSenderActorId() const;
  inline  ::NKikimrCapnProto_::TActorId::Reader getSenderActorId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TMsgQoS::Builder {
public:
  typedef TMsgQoS Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDeadlineSeconds();
  inline void setDeadlineSeconds( ::uint32_t value);

  inline bool hasMsgId();
  inline  ::NKikimrCapnProto_::TMessageId::Builder getMsgId();
  inline void setMsgId( ::NKikimrCapnProto_::TMessageId::Reader value);
  inline  ::NKikimrCapnProto_::TMessageId::Builder initMsgId();
  inline void adoptMsgId(::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> disownMsgId();

  inline  ::uint64_t getCost();
  inline void setCost( ::uint64_t value);

  inline  ::NKikimrCapnProto_::EVDiskQueueId getExtQueueId();
  inline void setExtQueueId( ::NKikimrCapnProto_::EVDiskQueueId value);

  inline  ::NKikimrCapnProto_::EVDiskInternalQueueId getIntQueueId();
  inline void setIntQueueId( ::NKikimrCapnProto_::EVDiskInternalQueueId value);

  inline bool hasCostSettings();
  inline  ::NKikimrCapnProto_::TVDiskCostSettings::Builder getCostSettings();
  inline void setCostSettings( ::NKikimrCapnProto_::TVDiskCostSettings::Reader value);
  inline  ::NKikimrCapnProto_::TVDiskCostSettings::Builder initCostSettings();
  inline void adoptCostSettings(::capnp::Orphan< ::NKikimrCapnProto_::TVDiskCostSettings>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskCostSettings> disownCostSettings();

  inline bool getSendMeCostSettings();
  inline void setSendMeCostSettings(bool value);

  inline bool hasWindow();
  inline  ::NKikimrCapnProto_::TWindowFeedback::Builder getWindow();
  inline void setWindow( ::NKikimrCapnProto_::TWindowFeedback::Reader value);
  inline  ::NKikimrCapnProto_::TWindowFeedback::Builder initWindow();
  inline void adoptWindow(::capnp::Orphan< ::NKikimrCapnProto_::TWindowFeedback>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TWindowFeedback> disownWindow();

  inline typename ClientID::Builder getClientID();
  inline typename ClientID::Builder initClientID();

  inline bool hasExecTimeStats();
  inline  ::NKikimrCapnProto_::TExecTimeStats::Builder getExecTimeStats();
  inline void setExecTimeStats( ::NKikimrCapnProto_::TExecTimeStats::Reader value);
  inline  ::NKikimrCapnProto_::TExecTimeStats::Builder initExecTimeStats();
  inline void adoptExecTimeStats(::capnp::Orphan< ::NKikimrCapnProto_::TExecTimeStats>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TExecTimeStats> disownExecTimeStats();

  inline bool hasSenderActorId();
  inline  ::NKikimrCapnProto_::TActorId::Builder getSenderActorId();
  inline void setSenderActorId( ::NKikimrCapnProto_::TActorId::Reader value);
  inline  ::NKikimrCapnProto_::TActorId::Builder initSenderActorId();
  inline void adoptSenderActorId(::capnp::Orphan< ::NKikimrCapnProto_::TActorId>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TActorId> disownSenderActorId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TMsgQoS::Pipeline {
public:
  typedef TMsgQoS Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::NKikimrCapnProto_::TMessageId::Pipeline getMsgId();
  inline  ::NKikimrCapnProto_::TVDiskCostSettings::Pipeline getCostSettings();
  inline  ::NKikimrCapnProto_::TWindowFeedback::Pipeline getWindow();
  inline typename ClientID::Pipeline getClientID();
  inline  ::NKikimrCapnProto_::TExecTimeStats::Pipeline getExecTimeStats();
  inline  ::NKikimrCapnProto_::TActorId::Pipeline getSenderActorId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TMsgQoS::ClientID::Reader {
public:
  typedef ClientID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isProxyNodeId() const;
  inline  ::uint32_t getProxyNodeId() const;

  inline bool isReplVDiskId() const;
  inline  ::uint32_t getReplVDiskId() const;

  inline bool isVDiskLoadId() const;
  inline  ::uint64_t getVDiskLoadId() const;

  inline bool isVPatchVDiskId() const;
  inline  ::uint32_t getVPatchVDiskId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TMsgQoS::ClientID::Builder {
public:
  typedef ClientID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isProxyNodeId();
  inline  ::uint32_t getProxyNodeId();
  inline void setProxyNodeId( ::uint32_t value);

  inline bool isReplVDiskId();
  inline  ::uint32_t getReplVDiskId();
  inline void setReplVDiskId( ::uint32_t value);

  inline bool isVDiskLoadId();
  inline  ::uint64_t getVDiskLoadId();
  inline void setVDiskLoadId( ::uint64_t value);

  inline bool isVPatchVDiskId();
  inline  ::uint32_t getVPatchVDiskId();
  inline void setVPatchVDiskId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TMsgQoS::ClientID::Pipeline {
public:
  typedef ClientID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TVDiskID::Reader {
public:
  typedef TVDiskID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID() const;

  inline  ::uint32_t getGroupGeneration() const;

  inline  ::uint32_t getRing() const;

  inline  ::uint32_t getDomain() const;

  inline  ::uint32_t getVDisk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TVDiskID::Builder {
public:
  typedef TVDiskID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getGroupID();
  inline void setGroupID( ::uint32_t value);

  inline  ::uint32_t getGroupGeneration();
  inline void setGroupGeneration( ::uint32_t value);

  inline  ::uint32_t getRing();
  inline void setRing( ::uint32_t value);

  inline  ::uint32_t getDomain();
  inline void setDomain( ::uint32_t value);

  inline  ::uint32_t getVDisk();
  inline void setVDisk( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TVDiskID::Pipeline {
public:
  typedef TVDiskID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TLogoBlobID::Reader {
public:
  typedef TLogoBlobID Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1() const;

  inline  ::uint64_t getRawX2() const;

  inline  ::uint64_t getRawX3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TLogoBlobID::Builder {
public:
  typedef TLogoBlobID Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRawX1();
  inline void setRawX1( ::uint64_t value);

  inline  ::uint64_t getRawX2();
  inline void setRawX2( ::uint64_t value);

  inline  ::uint64_t getRawX3();
  inline void setRawX3( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TLogoBlobID::Pipeline {
public:
  typedef TLogoBlobID Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TRangeQuery::Reader {
public:
  typedef TRangeQuery Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrom() const;
  inline  ::NKikimrCapnProto_::TLogoBlobID::Reader getFrom() const;

  inline bool hasTo() const;
  inline  ::NKikimrCapnProto_::TLogoBlobID::Reader getTo() const;

  inline  ::uint64_t getCookie() const;

  inline  ::uint32_t getMaxResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TRangeQuery::Builder {
public:
  typedef TRangeQuery Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrom();
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder getFrom();
  inline void setFrom( ::NKikimrCapnProto_::TLogoBlobID::Reader value);
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder initFrom();
  inline void adoptFrom(::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> disownFrom();

  inline bool hasTo();
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder getTo();
  inline void setTo( ::NKikimrCapnProto_::TLogoBlobID::Reader value);
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder initTo();
  inline void adoptTo(::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> disownTo();

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline  ::uint32_t getMaxResults();
  inline void setMaxResults( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TRangeQuery::Pipeline {
public:
  typedef TRangeQuery Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline getFrom();
  inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline getTo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TExtremeQuery::Reader {
public:
  typedef TExtremeQuery Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::NKikimrCapnProto_::TLogoBlobID::Reader getId() const;

  inline  ::uint64_t getShift() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getCookie() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TExtremeQuery::Builder {
public:
  typedef TExtremeQuery Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder getId();
  inline void setId( ::NKikimrCapnProto_::TLogoBlobID::Reader value);
  inline  ::NKikimrCapnProto_::TLogoBlobID::Builder initId();
  inline void adoptId(::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> disownId();

  inline  ::uint64_t getShift();
  inline void setShift( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TExtremeQuery::Pipeline {
public:
  typedef TExtremeQuery Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline getId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TTabletData::Reader {
public:
  typedef TTabletData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getGeneration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TTabletData::Builder {
public:
  typedef TTabletData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getGeneration();
  inline void setGeneration( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TTabletData::Pipeline {
public:
  typedef TTabletData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TEvVGet::Reader {
public:
  typedef TEvVGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRangeQuery() const;
  inline  ::NKikimrCapnProto_::TRangeQuery::Reader getRangeQuery() const;

  inline bool hasExtremeQueries() const;
  inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader getExtremeQueries() const;

  inline bool hasVDiskID() const;
  inline  ::NKikimrCapnProto_::TVDiskID::Reader getVDiskID() const;

  inline bool getNotifyIfNotReady() const;

  inline bool getShowInternals() const;

  inline  ::uint64_t getCookie() const;

  inline bool hasMsgQoS() const;
  inline  ::NKikimrCapnProto_::TMsgQoS::Reader getMsgQoS() const;

  inline bool getIndexOnly() const;

  inline  ::NKikimrCapnProto_::EGetHandleClass getHandleClass() const;

  inline bool getSuppressBarrierCheck() const;

  inline  ::uint64_t getTabletId() const;

  inline bool getAcquireBlockedGeneration() const;

  inline bool hasTimestamps() const;
  inline  ::NKikimrCapnProto_::TTimestamps::Reader getTimestamps() const;

  inline  ::uint32_t getForceBlockedGeneration() const;

  inline bool hasReaderTabletData() const;
  inline  ::NKikimrCapnProto_::TTabletData::Reader getReaderTabletData() const;

  inline bool hasForceBlockTabletData() const;
  inline  ::NKikimrCapnProto_::TTabletData::Reader getForceBlockTabletData() const;

  inline bool hasSnapshotId() const;
  inline  ::capnp::Data::Reader getSnapshotId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TEvVGet::Builder {
public:
  typedef TEvVGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRangeQuery();
  inline  ::NKikimrCapnProto_::TRangeQuery::Builder getRangeQuery();
  inline void setRangeQuery( ::NKikimrCapnProto_::TRangeQuery::Reader value);
  inline  ::NKikimrCapnProto_::TRangeQuery::Builder initRangeQuery();
  inline void adoptRangeQuery(::capnp::Orphan< ::NKikimrCapnProto_::TRangeQuery>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TRangeQuery> disownRangeQuery();

  inline bool hasExtremeQueries();
  inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder getExtremeQueries();
  inline void setExtremeQueries( ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder initExtremeQueries(unsigned int size);
  inline void adoptExtremeQueries(::capnp::Orphan< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>> disownExtremeQueries();

  inline bool hasVDiskID();
  inline  ::NKikimrCapnProto_::TVDiskID::Builder getVDiskID();
  inline void setVDiskID( ::NKikimrCapnProto_::TVDiskID::Reader value);
  inline  ::NKikimrCapnProto_::TVDiskID::Builder initVDiskID();
  inline void adoptVDiskID(::capnp::Orphan< ::NKikimrCapnProto_::TVDiskID>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskID> disownVDiskID();

  inline bool getNotifyIfNotReady();
  inline void setNotifyIfNotReady(bool value);

  inline bool getShowInternals();
  inline void setShowInternals(bool value);

  inline  ::uint64_t getCookie();
  inline void setCookie( ::uint64_t value);

  inline bool hasMsgQoS();
  inline  ::NKikimrCapnProto_::TMsgQoS::Builder getMsgQoS();
  inline void setMsgQoS( ::NKikimrCapnProto_::TMsgQoS::Reader value);
  inline  ::NKikimrCapnProto_::TMsgQoS::Builder initMsgQoS();
  inline void adoptMsgQoS(::capnp::Orphan< ::NKikimrCapnProto_::TMsgQoS>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TMsgQoS> disownMsgQoS();

  inline bool getIndexOnly();
  inline void setIndexOnly(bool value);

  inline  ::NKikimrCapnProto_::EGetHandleClass getHandleClass();
  inline void setHandleClass( ::NKikimrCapnProto_::EGetHandleClass value);

  inline bool getSuppressBarrierCheck();
  inline void setSuppressBarrierCheck(bool value);

  inline  ::uint64_t getTabletId();
  inline void setTabletId( ::uint64_t value);

  inline bool getAcquireBlockedGeneration();
  inline void setAcquireBlockedGeneration(bool value);

  inline bool hasTimestamps();
  inline  ::NKikimrCapnProto_::TTimestamps::Builder getTimestamps();
  inline void setTimestamps( ::NKikimrCapnProto_::TTimestamps::Reader value);
  inline  ::NKikimrCapnProto_::TTimestamps::Builder initTimestamps();
  inline void adoptTimestamps(::capnp::Orphan< ::NKikimrCapnProto_::TTimestamps>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TTimestamps> disownTimestamps();

  inline  ::uint32_t getForceBlockedGeneration();
  inline void setForceBlockedGeneration( ::uint32_t value);

  inline bool hasReaderTabletData();
  inline  ::NKikimrCapnProto_::TTabletData::Builder getReaderTabletData();
  inline void setReaderTabletData( ::NKikimrCapnProto_::TTabletData::Reader value);
  inline  ::NKikimrCapnProto_::TTabletData::Builder initReaderTabletData();
  inline void adoptReaderTabletData(::capnp::Orphan< ::NKikimrCapnProto_::TTabletData>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData> disownReaderTabletData();

  inline bool hasForceBlockTabletData();
  inline  ::NKikimrCapnProto_::TTabletData::Builder getForceBlockTabletData();
  inline void setForceBlockTabletData( ::NKikimrCapnProto_::TTabletData::Reader value);
  inline  ::NKikimrCapnProto_::TTabletData::Builder initForceBlockTabletData();
  inline void adoptForceBlockTabletData(::capnp::Orphan< ::NKikimrCapnProto_::TTabletData>&& value);
  inline ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData> disownForceBlockTabletData();

  inline bool hasSnapshotId();
  inline  ::capnp::Data::Builder getSnapshotId();
  inline void setSnapshotId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSnapshotId(unsigned int size);
  inline void adoptSnapshotId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSnapshotId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TEvVGet::Pipeline {
public:
  typedef TEvVGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::NKikimrCapnProto_::TRangeQuery::Pipeline getRangeQuery();
  inline  ::NKikimrCapnProto_::TVDiskID::Pipeline getVDiskID();
  inline  ::NKikimrCapnProto_::TMsgQoS::Pipeline getMsgQoS();
  inline  ::NKikimrCapnProto_::TTimestamps::Pipeline getTimestamps();
  inline  ::NKikimrCapnProto_::TTabletData::Pipeline getReaderTabletData();
  inline  ::NKikimrCapnProto_::TTabletData::Pipeline getForceBlockTabletData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TMessageId::Reader::getSequenceId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMessageId::Builder::getSequenceId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TMessageId::Builder::setSequenceId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TMessageId::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMessageId::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TMessageId::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getSentByDSProxyUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getSentByDSProxyUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setSentByDSProxyUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getReceivedByVDiskUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getReceivedByVDiskUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setReceivedByVDiskUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getSentByVDiskUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getSentByVDiskUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setSentByVDiskUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTimestamps::Reader::getReceivedByDSProxyUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTimestamps::Builder::getReceivedByDSProxyUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TTimestamps::Builder::setReceivedByDSProxyUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TActorId::Reader::getRawX1() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TActorId::Builder::getRawX1() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TActorId::Builder::setRawX1( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TActorId::Reader::getRawX2() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TActorId::Builder::getRawX2() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TActorId::Builder::setRawX2( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getSubmitTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getSubmitTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setSubmitTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getInSenderQueue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getInSenderQueue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setInSenderQueue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getReceivedTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getReceivedTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setReceivedTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getInQueue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getInQueue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setInQueue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getExecution() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getExecution() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setExecution( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExecTimeStats::Reader::getHugeWriteTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExecTimeStats::Builder::getHugeWriteTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TExecTimeStats::Builder::setHugeWriteTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::NKikimrCapnProto_::EStatus TWindowFeedback::Reader::getStatus() const {
  return _reader.getDataField< ::NKikimrCapnProto_::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::NKikimrCapnProto_::EStatus TWindowFeedback::Builder::getStatus() {
  return _builder.getDataField< ::NKikimrCapnProto_::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setStatus( ::NKikimrCapnProto_::EStatus value) {
  _builder.setDataField< ::NKikimrCapnProto_::EStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TWindowFeedback::Reader::getActualWindowSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TWindowFeedback::Builder::getActualWindowSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setActualWindowSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TWindowFeedback::Reader::getMaxWindowSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TWindowFeedback::Builder::getMaxWindowSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TWindowFeedback::Builder::setMaxWindowSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TWindowFeedback::Reader::hasExpectedMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TWindowFeedback::Builder::hasExpectedMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TMessageId::Reader TWindowFeedback::Reader::getExpectedMsgId() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TWindowFeedback::Builder::getExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TMessageId::Pipeline TWindowFeedback::Pipeline::getExpectedMsgId() {
  return  ::NKikimrCapnProto_::TMessageId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TWindowFeedback::Builder::setExpectedMsgId( ::NKikimrCapnProto_::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TWindowFeedback::Builder::initExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TWindowFeedback::Builder::adoptExpectedMsgId(
    ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> TWindowFeedback::Builder::disownExpectedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TWindowFeedback::Reader::hasFailedMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TWindowFeedback::Builder::hasFailedMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TMessageId::Reader TWindowFeedback::Reader::getFailedMsgId() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TWindowFeedback::Builder::getFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TMessageId::Pipeline TWindowFeedback::Pipeline::getFailedMsgId() {
  return  ::NKikimrCapnProto_::TMessageId::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TWindowFeedback::Builder::setFailedMsgId( ::NKikimrCapnProto_::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TWindowFeedback::Builder::initFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TWindowFeedback::Builder::adoptFailedMsgId(
    ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> TWindowFeedback::Builder::disownFailedMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TVDiskCostSettings::Reader::getSeekTimeUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getSeekTimeUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setSeekTimeUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getReadSpeedBps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getReadSpeedBps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setReadSpeedBps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getWriteSpeedBps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getWriteSpeedBps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setWriteSpeedBps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getReadBlockSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getReadBlockSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setReadBlockSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TVDiskCostSettings::Reader::getWriteBlockSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TVDiskCostSettings::Builder::getWriteBlockSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setWriteBlockSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskCostSettings::Reader::getMinREALHugeBlobInBytes() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskCostSettings::Builder::getMinREALHugeBlobInBytes() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TVDiskCostSettings::Builder::setMinREALHugeBlobInBytes( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TMsgQoS::Reader::getDeadlineSeconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::Builder::getDeadlineSeconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setDeadlineSeconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasMsgId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasMsgId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TMessageId::Reader TMsgQoS::Reader::getMsgId() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TMsgQoS::Builder::getMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TMessageId::Pipeline TMsgQoS::Pipeline::getMsgId() {
  return  ::NKikimrCapnProto_::TMessageId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setMsgId( ::NKikimrCapnProto_::TMessageId::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TMessageId::Builder TMsgQoS::Builder::initMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptMsgId(
    ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TMessageId> TMsgQoS::Builder::disownMsgId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMessageId>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TMsgQoS::Reader::getCost() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMsgQoS::Builder::getCost() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setCost( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::NKikimrCapnProto_::EVDiskQueueId TMsgQoS::Reader::getExtQueueId() const {
  return _reader.getDataField< ::NKikimrCapnProto_::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::NKikimrCapnProto_::EVDiskQueueId TMsgQoS::Builder::getExtQueueId() {
  return _builder.getDataField< ::NKikimrCapnProto_::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setExtQueueId( ::NKikimrCapnProto_::EVDiskQueueId value) {
  _builder.setDataField< ::NKikimrCapnProto_::EVDiskQueueId>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::NKikimrCapnProto_::EVDiskInternalQueueId TMsgQoS::Reader::getIntQueueId() const {
  return _reader.getDataField< ::NKikimrCapnProto_::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::NKikimrCapnProto_::EVDiskInternalQueueId TMsgQoS::Builder::getIntQueueId() {
  return _builder.getDataField< ::NKikimrCapnProto_::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setIntQueueId( ::NKikimrCapnProto_::EVDiskInternalQueueId value) {
  _builder.setDataField< ::NKikimrCapnProto_::EVDiskInternalQueueId>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasCostSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasCostSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TVDiskCostSettings::Reader TMsgQoS::Reader::getCostSettings() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TVDiskCostSettings::Builder TMsgQoS::Builder::getCostSettings() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TVDiskCostSettings::Pipeline TMsgQoS::Pipeline::getCostSettings() {
  return  ::NKikimrCapnProto_::TVDiskCostSettings::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setCostSettings( ::NKikimrCapnProto_::TVDiskCostSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TVDiskCostSettings::Builder TMsgQoS::Builder::initCostSettings() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptCostSettings(
    ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskCostSettings>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskCostSettings> TMsgQoS::Builder::disownCostSettings() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskCostSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TMsgQoS::Reader::getSendMeCostSettings() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool TMsgQoS::Builder::getSendMeCostSettings() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::Builder::setSendMeCostSettings(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::Reader::hasWindow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasWindow() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TWindowFeedback::Reader TMsgQoS::Reader::getWindow() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TWindowFeedback::Builder TMsgQoS::Builder::getWindow() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TWindowFeedback::Pipeline TMsgQoS::Pipeline::getWindow() {
  return  ::NKikimrCapnProto_::TWindowFeedback::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setWindow( ::NKikimrCapnProto_::TWindowFeedback::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TWindowFeedback::Builder TMsgQoS::Builder::initWindow() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptWindow(
    ::capnp::Orphan< ::NKikimrCapnProto_::TWindowFeedback>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TWindowFeedback> TMsgQoS::Builder::disownWindow() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TWindowFeedback>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline typename TMsgQoS::ClientID::Reader TMsgQoS::Reader::getClientID() const {
  return typename TMsgQoS::ClientID::Reader(_reader);
}
inline typename TMsgQoS::ClientID::Builder TMsgQoS::Builder::getClientID() {
  return typename TMsgQoS::ClientID::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TMsgQoS::ClientID::Pipeline TMsgQoS::Pipeline::getClientID() {
  return typename TMsgQoS::ClientID::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TMsgQoS::ClientID::Builder TMsgQoS::Builder::initClientID() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<9>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  return typename TMsgQoS::ClientID::Builder(_builder);
}
inline bool TMsgQoS::Reader::hasExecTimeStats() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasExecTimeStats() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TExecTimeStats::Reader TMsgQoS::Reader::getExecTimeStats() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TExecTimeStats::Builder TMsgQoS::Builder::getExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TExecTimeStats::Pipeline TMsgQoS::Pipeline::getExecTimeStats() {
  return  ::NKikimrCapnProto_::TExecTimeStats::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setExecTimeStats( ::NKikimrCapnProto_::TExecTimeStats::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TExecTimeStats::Builder TMsgQoS::Builder::initExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptExecTimeStats(
    ::capnp::Orphan< ::NKikimrCapnProto_::TExecTimeStats>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TExecTimeStats> TMsgQoS::Builder::disownExecTimeStats() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TExecTimeStats>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TMsgQoS::Reader::hasSenderActorId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TMsgQoS::Builder::hasSenderActorId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TActorId::Reader TMsgQoS::Reader::getSenderActorId() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TActorId::Builder TMsgQoS::Builder::getSenderActorId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TActorId::Pipeline TMsgQoS::Pipeline::getSenderActorId() {
  return  ::NKikimrCapnProto_::TActorId::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TMsgQoS::Builder::setSenderActorId( ::NKikimrCapnProto_::TActorId::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TActorId::Builder TMsgQoS::Builder::initSenderActorId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TMsgQoS::Builder::adoptSenderActorId(
    ::capnp::Orphan< ::NKikimrCapnProto_::TActorId>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TActorId> TMsgQoS::Builder::disownSenderActorId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TActorId>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::NKikimrCapnProto_::TMsgQoS::ClientID::Which TMsgQoS::ClientID::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline  ::NKikimrCapnProto_::TMsgQoS::ClientID::Which TMsgQoS::ClientID::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool TMsgQoS::ClientID::Reader::isProxyNodeId() const {
  return which() == TMsgQoS::ClientID::PROXY_NODE_ID;
}
inline bool TMsgQoS::ClientID::Builder::isProxyNodeId() {
  return which() == TMsgQoS::ClientID::PROXY_NODE_ID;
}
inline  ::uint32_t TMsgQoS::ClientID::Reader::getProxyNodeId() const {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::PROXY_NODE_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::ClientID::Builder::getProxyNodeId() {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::PROXY_NODE_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::ClientID::Builder::setProxyNodeId( ::uint32_t value) {
  _builder.setDataField<TMsgQoS::ClientID::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TMsgQoS::ClientID::PROXY_NODE_ID);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::ClientID::Reader::isReplVDiskId() const {
  return which() == TMsgQoS::ClientID::REPL_V_DISK_ID;
}
inline bool TMsgQoS::ClientID::Builder::isReplVDiskId() {
  return which() == TMsgQoS::ClientID::REPL_V_DISK_ID;
}
inline  ::uint32_t TMsgQoS::ClientID::Reader::getReplVDiskId() const {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::REPL_V_DISK_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::ClientID::Builder::getReplVDiskId() {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::REPL_V_DISK_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::ClientID::Builder::setReplVDiskId( ::uint32_t value) {
  _builder.setDataField<TMsgQoS::ClientID::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TMsgQoS::ClientID::REPL_V_DISK_ID);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::ClientID::Reader::isVDiskLoadId() const {
  return which() == TMsgQoS::ClientID::V_DISK_LOAD_ID;
}
inline bool TMsgQoS::ClientID::Builder::isVDiskLoadId() {
  return which() == TMsgQoS::ClientID::V_DISK_LOAD_ID;
}
inline  ::uint64_t TMsgQoS::ClientID::Reader::getVDiskLoadId() const {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::V_DISK_LOAD_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TMsgQoS::ClientID::Builder::getVDiskLoadId() {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::V_DISK_LOAD_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::ClientID::Builder::setVDiskLoadId( ::uint64_t value) {
  _builder.setDataField<TMsgQoS::ClientID::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TMsgQoS::ClientID::V_DISK_LOAD_ID);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TMsgQoS::ClientID::Reader::isVPatchVDiskId() const {
  return which() == TMsgQoS::ClientID::V_PATCH_V_DISK_ID;
}
inline bool TMsgQoS::ClientID::Builder::isVPatchVDiskId() {
  return which() == TMsgQoS::ClientID::V_PATCH_V_DISK_ID;
}
inline  ::uint32_t TMsgQoS::ClientID::Reader::getVPatchVDiskId() const {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::V_PATCH_V_DISK_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TMsgQoS::ClientID::Builder::getVPatchVDiskId() {
  KJ_IREQUIRE((which() == TMsgQoS::ClientID::V_PATCH_V_DISK_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TMsgQoS::ClientID::Builder::setVPatchVDiskId( ::uint32_t value) {
  _builder.setDataField<TMsgQoS::ClientID::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TMsgQoS::ClientID::V_PATCH_V_DISK_ID);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getGroupID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getGroupID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setGroupID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getGroupGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getGroupGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setGroupGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getRing() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getRing() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setRing( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getDomain() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getDomain() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setDomain( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TVDiskID::Reader::getVDisk() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TVDiskID::Builder::getVDisk() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TVDiskID::Builder::setVDisk( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TLogoBlobID::Reader::getRawX1() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TLogoBlobID::Builder::getRawX1() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX1( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TLogoBlobID::Reader::getRawX2() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TLogoBlobID::Builder::getRawX2() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX2( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TLogoBlobID::Reader::getRawX3() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TLogoBlobID::Builder::getRawX3() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TLogoBlobID::Builder::setRawX3( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TRangeQuery::Reader::hasFrom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TRangeQuery::Builder::hasFrom() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Reader TRangeQuery::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TRangeQuery::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline TRangeQuery::Pipeline::getFrom() {
  return  ::NKikimrCapnProto_::TLogoBlobID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TRangeQuery::Builder::setFrom( ::NKikimrCapnProto_::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TRangeQuery::Builder::initFrom() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TRangeQuery::Builder::adoptFrom(
    ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> TRangeQuery::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TRangeQuery::Reader::hasTo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TRangeQuery::Builder::hasTo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Reader TRangeQuery::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TRangeQuery::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline TRangeQuery::Pipeline::getTo() {
  return  ::NKikimrCapnProto_::TLogoBlobID::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TRangeQuery::Builder::setTo( ::NKikimrCapnProto_::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TRangeQuery::Builder::initTo() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TRangeQuery::Builder::adoptTo(
    ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> TRangeQuery::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TRangeQuery::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TRangeQuery::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TRangeQuery::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TRangeQuery::Reader::getMaxResults() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TRangeQuery::Builder::getMaxResults() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TRangeQuery::Builder::setMaxResults( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TExtremeQuery::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TExtremeQuery::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Reader TExtremeQuery::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TExtremeQuery::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TLogoBlobID::Pipeline TExtremeQuery::Pipeline::getId() {
  return  ::NKikimrCapnProto_::TLogoBlobID::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TExtremeQuery::Builder::setId( ::NKikimrCapnProto_::TLogoBlobID::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TLogoBlobID::Builder TExtremeQuery::Builder::initId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TExtremeQuery::Builder::adoptId(
    ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TLogoBlobID> TExtremeQuery::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TLogoBlobID>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TExtremeQuery::Reader::getShift() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getShift() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setShift( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExtremeQuery::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TExtremeQuery::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TExtremeQuery::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TExtremeQuery::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TTabletData::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TTabletData::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TTabletData::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TTabletData::Reader::getGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TTabletData::Builder::getGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TTabletData::Builder::setGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasRangeQuery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasRangeQuery() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TRangeQuery::Reader TEvVGet::Reader::getRangeQuery() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TRangeQuery::Builder TEvVGet::Builder::getRangeQuery() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TRangeQuery::Pipeline TEvVGet::Pipeline::getRangeQuery() {
  return  ::NKikimrCapnProto_::TRangeQuery::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setRangeQuery( ::NKikimrCapnProto_::TRangeQuery::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TRangeQuery::Builder TEvVGet::Builder::initRangeQuery() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptRangeQuery(
    ::capnp::Orphan< ::NKikimrCapnProto_::TRangeQuery>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TRangeQuery> TEvVGet::Builder::disownRangeQuery() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TRangeQuery>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasExtremeQueries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasExtremeQueries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader TEvVGet::Reader::getExtremeQueries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder TEvVGet::Builder::getExtremeQueries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::setExtremeQueries( ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>::Builder TEvVGet::Builder::initExtremeQueries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TEvVGet::Builder::adoptExtremeQueries(
    ::capnp::Orphan< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>> TEvVGet::Builder::disownExtremeQueries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::NKikimrCapnProto_::TExtremeQuery,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasVDiskID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasVDiskID() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TVDiskID::Reader TEvVGet::Reader::getVDiskID() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TVDiskID::Builder TEvVGet::Builder::getVDiskID() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TVDiskID::Pipeline TEvVGet::Pipeline::getVDiskID() {
  return  ::NKikimrCapnProto_::TVDiskID::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setVDiskID( ::NKikimrCapnProto_::TVDiskID::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TVDiskID::Builder TEvVGet::Builder::initVDiskID() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptVDiskID(
    ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskID>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TVDiskID> TEvVGet::Builder::disownVDiskID() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TVDiskID>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::getNotifyIfNotReady() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getNotifyIfNotReady() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setNotifyIfNotReady(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getShowInternals() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getShowInternals() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setShowInternals(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TEvVGet::Reader::getCookie() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TEvVGet::Builder::getCookie() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setCookie( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasMsgQoS() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasMsgQoS() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TMsgQoS::Reader TEvVGet::Reader::getMsgQoS() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TMsgQoS::Builder TEvVGet::Builder::getMsgQoS() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TMsgQoS::Pipeline TEvVGet::Pipeline::getMsgQoS() {
  return  ::NKikimrCapnProto_::TMsgQoS::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setMsgQoS( ::NKikimrCapnProto_::TMsgQoS::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TMsgQoS::Builder TEvVGet::Builder::initMsgQoS() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptMsgQoS(
    ::capnp::Orphan< ::NKikimrCapnProto_::TMsgQoS>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TMsgQoS> TEvVGet::Builder::disownMsgQoS() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TMsgQoS>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::getIndexOnly() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getIndexOnly() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setIndexOnly(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::NKikimrCapnProto_::EGetHandleClass TEvVGet::Reader::getHandleClass() const {
  return _reader.getDataField< ::NKikimrCapnProto_::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::NKikimrCapnProto_::EGetHandleClass TEvVGet::Builder::getHandleClass() {
  return _builder.getDataField< ::NKikimrCapnProto_::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setHandleClass( ::NKikimrCapnProto_::EGetHandleClass value) {
  _builder.setDataField< ::NKikimrCapnProto_::EGetHandleClass>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getSuppressBarrierCheck() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getSuppressBarrierCheck() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setSuppressBarrierCheck(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TEvVGet::Reader::getTabletId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TEvVGet::Builder::getTabletId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setTabletId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::getAcquireBlockedGeneration() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool TEvVGet::Builder::getAcquireBlockedGeneration() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setAcquireBlockedGeneration(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasTimestamps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasTimestamps() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TTimestamps::Reader TEvVGet::Reader::getTimestamps() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TTimestamps::Builder TEvVGet::Builder::getTimestamps() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TTimestamps::Pipeline TEvVGet::Pipeline::getTimestamps() {
  return  ::NKikimrCapnProto_::TTimestamps::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setTimestamps( ::NKikimrCapnProto_::TTimestamps::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TTimestamps::Builder TEvVGet::Builder::initTimestamps() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptTimestamps(
    ::capnp::Orphan< ::NKikimrCapnProto_::TTimestamps>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TTimestamps> TEvVGet::Builder::disownTimestamps() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTimestamps>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t TEvVGet::Reader::getForceBlockedGeneration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TEvVGet::Builder::getForceBlockedGeneration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TEvVGet::Builder::setForceBlockedGeneration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TEvVGet::Reader::hasReaderTabletData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasReaderTabletData() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TTabletData::Reader TEvVGet::Reader::getReaderTabletData() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TTabletData::Builder TEvVGet::Builder::getReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TTabletData::Pipeline TEvVGet::Pipeline::getReaderTabletData() {
  return  ::NKikimrCapnProto_::TTabletData::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setReaderTabletData( ::NKikimrCapnProto_::TTabletData::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TTabletData::Builder TEvVGet::Builder::initReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptReaderTabletData(
    ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData> TEvVGet::Builder::disownReaderTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasForceBlockTabletData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasForceBlockTabletData() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::NKikimrCapnProto_::TTabletData::Reader TEvVGet::Reader::getForceBlockTabletData() const {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::NKikimrCapnProto_::TTabletData::Builder TEvVGet::Builder::getForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::NKikimrCapnProto_::TTabletData::Pipeline TEvVGet::Pipeline::getForceBlockTabletData() {
  return  ::NKikimrCapnProto_::TTabletData::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TEvVGet::Builder::setForceBlockTabletData( ::NKikimrCapnProto_::TTabletData::Reader value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::NKikimrCapnProto_::TTabletData::Builder TEvVGet::Builder::initForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::adoptForceBlockTabletData(
    ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData>&& value) {
  ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NKikimrCapnProto_::TTabletData> TEvVGet::Builder::disownForceBlockTabletData() {
  return ::capnp::_::PointerHelpers< ::NKikimrCapnProto_::TTabletData>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool TEvVGet::Reader::hasSnapshotId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool TEvVGet::Builder::hasSnapshotId() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TEvVGet::Reader::getSnapshotId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TEvVGet::Builder::getSnapshotId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void TEvVGet::Builder::setSnapshotId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TEvVGet::Builder::initSnapshotId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void TEvVGet::Builder::adoptSnapshotId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TEvVGet::Builder::disownSnapshotId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

